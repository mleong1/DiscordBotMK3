import * as tslib_1 from "tslib";
import { test } from 'ava';
import { CaliforniaChip, ChipColorType, ChipColor } from 'typedeck';
test('chip has type of CaliforniaChip', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new CaliforniaChip(ChipColor.Black);
    t.deepEqual(chip.colorType, ChipColorType.California);
}));
test('chip color is set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new CaliforniaChip(ChipColor.Black);
    t.deepEqual(chip.color, ChipColor.Black);
}));
test('chip color is set and type set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new CaliforniaChip(ChipColor.Black, ChipColorType.California);
    t.deepEqual(chip.colorType, ChipColorType.California);
    t.deepEqual(chip.color, ChipColor.Black);
}));
test('chip color is set and type set with override', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const overrideValue = 45;
    const chip = new CaliforniaChip(ChipColor.Black, ChipColorType.California, overrideValue);
    t.deepEqual(chip.colorType, ChipColorType.California);
    t.deepEqual(chip.color, ChipColor.Black);
    t.deepEqual(chip.getValue(), overrideValue);
}));
test('chip color is printed', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new CaliforniaChip(ChipColor.Black);
    t.deepEqual(chip.color, ChipColor.Black);
    t.deepEqual(chip.toString(), ChipColor[ChipColor.Black]);
    t.deepEqual(chip.toString(), 'Black');
}));
test('chip color is same as index', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new CaliforniaChip(ChipColor.Black);
    t.deepEqual(chip.color, ChipColor.Black);
    t.deepEqual(chip.toString(), chip.getIndex());
}));
test('chip blue is 1', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = ChipColor.Blue;
    const expectedValue = 1;
    const chip = new CaliforniaChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
test('gold chip throws exception', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = ChipColor.Gold;
    const chip = new CaliforniaChip(chipColor);
    try {
        chip.getValue();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Unable to determine value of ${ChipColor[chipColor]} Chip for ${ChipColorType[ChipColorType.California]}`);
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsaWZvcm5pYUNoaXAuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hpcC9jYWxpZm9ybmlhQ2hpcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzNCLE9BQU8sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwRSxJQUFJLENBQUMsaUNBQWlDLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUNoRCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FB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