"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringifyComparer_model_1 = require("../../common/stringifyComparer.model");
const chip_service_1 = require("../../services/chip.service");
/**
 * Basic class to represent a grouping of IChips.
 *
 * Supports activities like: getting chips,
 * adding chips, taking specific chip, taking
 * chips by value, getting value of chips.
 */
class ChipCollection {
    constructor(chips = []) {
        this.chips = chips;
        this.objectComparer = new stringifyComparer_model_1.StringifyComparer();
        this.chipService = new chip_service_1.ChipService();
    }
    addChip(chip) {
        return this.addChips([chip]);
    }
    addChips(chips) {
        this.getChips().unshift(...chips);
        return this;
    }
    getChips() {
        return this.chips;
    }
    setChips(chips) {
        this.chips = chips;
        return this;
    }
    getChipCount() {
        return this.getChips().length;
    }
    isEmpty() {
        return this.getChipCount() === 0;
    }
    removeChips(chips) {
        if (chips.length === 0) {
            return this;
        }
        this.chipService.removeChipsFromStack(this.getChips(), chips);
        return this;
    }
    /**
     * Condense chips into fewer but larger denominations.
     * Uses the first chip's class to create new colored chips with.
     */
    colorUp() {
        if (this.getChipCount() === 0) {
            return this;
        }
        const newChips = this.chipService.colorUp(this.getChips(), this.getChips()[0].constructor);
        this.setChips(newChips);
        return this;
    }
    /**
     * Returns first identified index position of chip in
     * collection.
     * @param chip Object to search for in collection
     */
    indexOfChip(chip) {
        for (let i = 0; i < this.getChipCount(); i++) {
            const loopCard = this.getChips()[i];
            if (this.objectComparer.areEquivalent(chip, loopCard)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Return value of Chips currently in ChipCollection (via `IChipCollection.getChips()`).
     * Optionally, can pass in `IChip[]` to evaluate a manually passed in value.
     * @param chips Optional, value of passed in chips. If no chips passed in,
     * it will evaluate value of current ChipCollection.
     */
    getValue(chips) {
        if (chips === undefined) {
            chips = this.getChips();
        }
        return this.chipService.valueOfChips(chips);
    }
    /**
     * Will pull `IChip`s from `IChipCollection` to satisfy
     * the `amount` requested.
     * @param amount Value to take from IChipCollection
     */
    takeValue(amount) {
        const currentValue = this.getValue();
        if (amount > currentValue) {
            throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${amount}`);
        }
        return this.chipService.makeChange(this, amount, this.getChips()[0].constructor);
    }
}
exports.ChipCollection = ChipCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcENvbGxlY3Rpb24ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NoaXBDb2xsZWN0aW9uL2NoaXBDb2xsZWN0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0Esa0ZBQXlFO0FBRXpFLDhEQUEwRDtBQUUxRDs7Ozs7O0dBTUc7QUFDSCxNQUFhLGNBQWM7SUFJekIsWUFBcUIsUUFBaUIsRUFBRTtRQUFuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBSGhDLG1CQUFjLEdBQW9CLElBQUksMkNBQWlCLEVBQUUsQ0FBQztRQUMxRCxnQkFBVyxHQUFpQixJQUFJLDBCQUFXLEVBQUUsQ0FBQztJQUd0RCxDQUFDO0lBRU0sT0FBTyxDQUFFLElBQVc7UUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sUUFBUSxDQUFFLEtBQWM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVNLFFBQVEsQ0FBRSxLQUFjO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFlBQVk7UUFDakIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxXQUFXLENBQUUsS0FBYztRQUNoQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFDSSxPQUFPO1FBQ1osSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQWtCLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxXQUFXLENBQUUsSUFBVztRQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDckQsT0FBTyxDQUFDLENBQUM7YUFDVjtTQUNGO1FBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFFBQVEsQ0FBRSxLQUEyQjtRQUMxQyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxTQUFTLENBQUUsTUFBYztRQUM5QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckMsSUFBSSxNQUFNLEdBQUcsWUFBWSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLFlBQVksaUNBQWlDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDN0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQWtCLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0Y7QUE5RkQsd0NBOEZDIn0=