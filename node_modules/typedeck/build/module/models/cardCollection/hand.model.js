import { Suit } from '../card/suit.model';
import { CardPile } from './cardPile.model';
import { MapExtensions } from '../../common/mapExtensions.model';
/**
 * Represents a group of cards assigned to an IPlayer
 */
export class Hand extends CardPile {
    constructor(cards = []) {
        super(cards); // CardPile.constructor
        this.name = 'Hand';
        this.suitOrder = [Suit.Clubs, Suit.Spades, Suit.Diamonds, Suit.Hearts];
    }
    /**
     * Performs action of removing a card from player hand.
     *
     * Throws error if `ICard` played is not in player's hand.
     * @param card - Card being played
     */
    playCard(card) {
        this.removeCards([card]);
    }
    /**
     * Order cards in Hand by Rank and Suit
     * @see Hand.suitOrder
     */
    sortCards(cardRank) {
        const cards = this.getCards();
        if (this.isEmpty()) {
            throw new Error('No cards to sort');
        }
        if (this.suitOrder.length === 0) {
            throw new Error('No suit order defined');
        }
        let sortedCardsBySuit = [];
        const cardsBySuit = new Map(Array.from(MapExtensions.GroupBy(cards, (card) => this.suitOrder.indexOf(card.suit)).entries()).sort());
        cardsBySuit.forEach((suitCards) => {
            sortedCardsBySuit = sortedCardsBySuit.concat(suitCards.sort((a, b) => {
                return cardRank.getRankValue(a) - cardRank.getRankValue(b);
            }));
        });
        this.setCards(sortedCardsBySuit);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2FyZENvbGxlY3Rpb24vaGFuZC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUtqRTs7R0FFRztBQUNILE1BQU0sT0FBTyxJQUFLLFNBQVEsUUFBUTtJQUloQyxZQUFhLFFBQWlCLEVBQUU7UUFDOUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsdUJBQXVCO1FBSmhDLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxjQUFTLEdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFJakYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksUUFBUSxDQUFFLElBQVc7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFNBQVMsQ0FBRSxRQUFrQjtRQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxpQkFBaUIsR0FBWSxFQUFFLENBQUM7UUFDcEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQzVHLENBQUM7UUFFRixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBa0IsRUFBRSxFQUFFO1lBQ3pDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxFQUFFO2dCQUNqRixPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3RCxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YifQ==