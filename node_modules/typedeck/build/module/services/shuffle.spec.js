import * as tslib_1 from "tslib";
import { test } from 'ava';
import { DurstenfeldShuffleService, Card, CardName } from 'typedeck';
test('does shuffle', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new DurstenfeldShuffleService();
    const staticCards = [
        new Card(CardName.Ace),
        new Card(CardName.Two),
        new Card(CardName.Three),
        new Card(CardName.Four),
        new Card(CardName.Five),
        new Card(CardName.Six),
        new Card(CardName.Seven),
        new Card(CardName.Eight),
        new Card(CardName.Nine),
        new Card(CardName.Ten),
        new Card(CardName.Jack),
        new Card(CardName.Queen),
        new Card(CardName.King),
        new Card(CardName.Joker)
    ];
    const shuffledCards = service.shuffle([...staticCards]);
    let allEquivalent = true;
    for (let i = 0; i < shuffledCards.length; i++) {
        if (staticCards[i].getIndex() !== shuffledCards[i].getIndex()) {
            allEquivalent = false;
            break;
        }
    }
    t.false(allEquivalent);
}));
test('will error on less than 2 cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new DurstenfeldShuffleService();
    const cardsToShuffle = [
        new Card(CardName.Ace)
    ];
    try {
        service.shuffle(cardsToShuffle);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Not enough cards to shuffle');
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3NodWZmbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQztBQUMzQixPQUFPLEVBQ0wseUJBQXlCLEVBRXpCLElBQUksRUFDSixRQUFRLEVBQ1QsTUFBTSxVQUFVLENBQUM7QUFFbEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQzdCLE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQXlCLEVBQUUsQ0FBQztJQUNoRCxNQUFNLFdBQVcsR0FBWTtRQUMzQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7S0FDekIsQ0FBQztJQUNGLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM3RCxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLE1BQU07U0FDUDtLQUNGO0lBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSx5QkFBeUIsRUFBRSxDQUFDO0lBQ2hELE1BQU0sY0FBYyxHQUFZO1FBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7S0FDdkIsQ0FBQztJQUNGLElBQUk7UUFDRixPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUNwQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLDZCQUE2QixDQUFDLENBQUM7S0FDekQ7QUFDSCxDQUFDLENBQUEsQ0FBQyxDQUFDIn0=