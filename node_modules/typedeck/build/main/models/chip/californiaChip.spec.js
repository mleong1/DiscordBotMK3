"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('chip has type of CaliforniaChip', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.California);
}));
ava_1.test('chip color is set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
}));
ava_1.test('chip color is set and type set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black, typedeck_1.ChipColorType.California);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.California);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
}));
ava_1.test('chip color is set and type set with override', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const overrideValue = 45;
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black, typedeck_1.ChipColorType.California, overrideValue);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.California);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.getValue(), overrideValue);
}));
ava_1.test('chip color is printed', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), typedeck_1.ChipColor[typedeck_1.ChipColor.Black]);
    t.deepEqual(chip.toString(), 'Black');
}));
ava_1.test('chip color is same as index', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.CaliforniaChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), chip.getIndex());
}));
ava_1.test('chip blue is 1', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Blue;
    const expectedValue = 1;
    const chip = new typedeck_1.CaliforniaChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('gold chip throws exception', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Gold;
    const chip = new typedeck_1.CaliforniaChip(chipColor);
    try {
        chip.getValue();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Unable to determine value of ${typedeck_1.ChipColor[chipColor]} Chip for ${typedeck_1.ChipColorType[typedeck_1.ChipColorType.California]}`);
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsaWZvcm5pYUNoaXAuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hpcC9jYWxpZm9ybmlhQ2hpcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUEyQjtBQUMzQix1Q0FBb0U7QUFFcEUsVUFBSSxDQUFDLGlDQUFpQyxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDaEQsTUFBTSxJQUFJLEdBQUcsSUFBSSx5QkFBYyxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFVBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUkseUJBQWMsQ0FBQyxvQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxVQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUMvQyxNQUFNLElBQUksR0FBRyxJQUFJLHlCQUFjLENBQUMsb0JBQVMsQ0FBQyxLQUFLLEVBQUUsd0JBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsb0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgs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