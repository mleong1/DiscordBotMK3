"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('chip has type of Standard', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.Standard);
}));
ava_1.test('chip color is set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.Standard);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
}));
ava_1.test('chip color is set and type set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black, typedeck_1.ChipColorType.Standard);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.Standard);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
}));
ava_1.test('chip color is set and type set with override', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const overrideValue = 45;
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black, typedeck_1.ChipColorType.Standard, overrideValue);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.Standard);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.getValue(), overrideValue);
}));
ava_1.test('chip color is printed', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), typedeck_1.ChipColor[typedeck_1.ChipColor.Black]);
    t.deepEqual(chip.toString(), 'Black');
}));
ava_1.test('chip color is same as index', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), chip.getIndex());
}));
ava_1.test('chip white is 1', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.White;
    const expectedValue = 1;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('chip red is 5', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Red;
    const expectedValue = 5;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('chip blue is 10', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Blue;
    const expectedValue = 10;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('chip gray is 20', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Gray;
    const expectedValue = 20;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('chip green is 25', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Green;
    const expectedValue = 25;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('chip black is 100', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Black;
    const expectedValue = 100;
    const chip = new typedeck_1.StandardChip(chipColor);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), expectedValue);
    t.deepEqual(chip.getValue(chipColor), expectedValue);
}));
ava_1.test('brown chip throws exception', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.Brown;
    const chip = new typedeck_1.StandardChip(chipColor);
    try {
        chip.getValue();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Unable to determine value of ${typedeck_1.ChipColor[chipColor]} Chip for ${typedeck_1.ChipColorType[typedeck_1.ChipColorType.Standard]}`);
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmRhcmRDaGlwLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NoaXAvc3RhbmRhcmRDaGlwLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTJCO0FBQzNCLHVDQUFrRTtBQUVsRSxVQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLHVCQUFZLENBQUMsb0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSx1QkFBWSxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFVBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksdUJBQVksQ0FBQyxvQkFBUyxDQUFDLEtBQUssRUFBRSx3QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFD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