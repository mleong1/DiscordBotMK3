"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
let getHands = (type) => {
    switch (type) {
        case typedeck_1.PokerHandType.HighCard:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts), new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Clubs)]
            ];
        case typedeck_1.PokerHandType.OnePair:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Hearts), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Hearts)]
            ];
        case typedeck_1.PokerHandType.TwoPair:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)]
            ];
        case typedeck_1.PokerHandType.ThreeOfAKind:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Six, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)]
            ];
        case typedeck_1.PokerHandType.Straight:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Hearts)],
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts), new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Clubs)]
            ];
        case typedeck_1.PokerHandType.Flush:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Spades),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Spades)]
            ];
        case typedeck_1.PokerHandType.FullHouse:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)]
            ];
        case typedeck_1.PokerHandType.FourOfAKind:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)]
            ];
        case typedeck_1.PokerHandType.StraightFlush:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Clubs), new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Six, typedeck_1.Suit.Clubs), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Clubs)]
            ];
        case typedeck_1.PokerHandType.RoyalFlush:
            return [
                [new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Clubs), new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Clubs), new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Clubs),
                    new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs)]
            ];
        default:
            return [];
    }
};
ava_1.test('exception thrown for invalid card amount tested', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const handsToTest = getHands(typedeck_1.PokerHandType.OnePair);
    try {
        service.scoreCards(handsToTest[0].splice(0, 1));
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Poker Scoring: Invalid cards provided. Please send at least 5 cards.');
    }
}));
ava_1.test('evaluates from cards with community cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const handToTest = new typedeck_1.Hand(getHands(testForHandType)[0].slice(0, 5));
    const handResult = service.scoreCards(handToTest.getCards(), [new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Clubs)]);
    t.deepEqual(handResult.handType, testForHandType);
}));
ava_1.test('exception thrown for invalid hand card amount tested', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const handToTest = new typedeck_1.Hand(getHands(typedeck_1.PokerHandType.OnePair)[0].splice(0, 1));
    try {
        service.scoreHand(handToTest);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Poker Scoring: Invalid cards provided. Please send at least 5 cards.');
    }
}));
ava_1.test('evaluates from a Hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const handToTest = new typedeck_1.Hand(getHands(testForHandType)[0]);
    const handResult = service.scoreHand(handToTest);
    t.deepEqual(handResult.handType, testForHandType);
}));
ava_1.test('evaluates from a Hand with community cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const communityCards = getHands(testForHandType)[0];
    const handCards = [communityCards.pop(), communityCards.pop()];
    const handToTest = new typedeck_1.Hand(handCards);
    const handResult = service.scoreHand(handToTest, communityCards);
    t.deepEqual(handResult.handType, testForHandType);
}));
ava_1.test('exception thrown for invalid Player card amount tested', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const handToTest = new typedeck_1.Hand(getHands(testForHandType)[0].splice(0, 3));
    const player = new typedeck_1.Player('Random Player', handToTest);
    try {
        service.scorePlayers([player], []);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Poker Scoring: Invalid cards provided for ${player.name}. Please send at least 5 cards.`);
    }
}));
ava_1.test('evaluates from a Player', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const handToTest = new typedeck_1.Hand(getHands(testForHandType)[0]);
    const player = new typedeck_1.Player('Random Player', handToTest);
    const playerResults = service.scorePlayers([player]);
    t.deepEqual(playerResults.get(player).handType, testForHandType);
}));
ava_1.test('evaluates from multiple Players', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType1 = typedeck_1.PokerHandType.OnePair;
    const handToTest1 = new typedeck_1.Hand(getHands(testForHandType1)[0]);
    const player1 = new typedeck_1.Player('Random Player 1', handToTest1);
    const testForHandType2 = typedeck_1.PokerHandType.TwoPair;
    const handToTest2 = new typedeck_1.Hand(getHands(testForHandType2)[0]);
    const player2 = new typedeck_1.Player('Random Player 2', handToTest2);
    const testForHandType3 = typedeck_1.PokerHandType.ThreeOfAKind;
    const handToTest3 = new typedeck_1.Hand(getHands(testForHandType3)[0]);
    const player3 = new typedeck_1.Player('Random Player 3', handToTest3);
    const playerResults = service.scorePlayers([player1, player2, player3]);
    t.deepEqual(playerResults.get(player1).handType, testForHandType1);
    t.deepEqual(playerResults.get(player2).handType, testForHandType2);
    t.deepEqual(playerResults.get(player3).handType, testForHandType3);
}));
ava_1.test('evaluates from a Player with community cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    const communityCards = getHands(testForHandType)[0];
    const handCards = [communityCards.pop(), communityCards.pop()];
    const handToTest = new typedeck_1.Hand(handCards);
    const player = new typedeck_1.Player('Random Player', handToTest);
    const playerResults = service.scorePlayers([player], communityCards);
    t.deepEqual(playerResults.get(player).handType, testForHandType);
}));
ava_1.test('evaluates a HighCard', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.HighCard;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
    }
}));
ava_1.test('evaluates a OnePair', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.OnePair;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 2);
    }
}));
ava_1.test('evaluates a TwoPair', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.TwoPair;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 4);
    }
}));
ava_1.test('evaluates a ThreeOfAKind', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.ThreeOfAKind;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 3);
    }
}));
ava_1.test('evaluates a Straight', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.Straight;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 5);
    }
}));
ava_1.test('evaluates a Flush', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.Flush;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 5);
    }
}));
ava_1.test('evaluates a FullHouse', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.FullHouse;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 5);
    }
}));
ava_1.test('evaluates a FourOfAKind', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.FourOfAKind;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 4);
    }
}));
ava_1.test('evaluates a StraightFlush', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.StraightFlush;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 5);
    }
}));
ava_1.test('evaluates a RoyalFlush', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const testForHandType = typedeck_1.PokerHandType.RoyalFlush;
    for (const hand of getHands(testForHandType)) {
        let result = service.scoreCards(hand);
        t.true(result.handType === testForHandType);
        t.true(result.cardsUsed.length === 5);
    }
}));
ava_1.test('evaluates a Score from cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    let testForHandType = typedeck_1.PokerHandType.HighCard;
    for (const hand of getHands(testForHandType)) {
        const score = service.getScoreRank(service.scoreCards(hand));
        t.true(score > 0);
    }
    testForHandType = typedeck_1.PokerHandType.TwoPair;
    for (const hand of getHands(testForHandType)) {
        const score = service.getScoreRank(service.scoreCards(hand));
        t.true(score > 0);
        t.true(score.toString()[0] === testForHandType.toString());
    }
    testForHandType = typedeck_1.PokerHandType.Straight;
    for (const hand of getHands(testForHandType)) {
        const score = service.getScoreRank(service.scoreCards(hand));
        t.true(score > 0);
        t.true(score.toString()[0] === testForHandType.toString());
    }
}));
ava_1.test('evaluates scores from players', t => {
    const service = new typedeck_1.PokerScoreService();
    const communityCards = new typedeck_1.CardPile([
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Six, typedeck_1.Suit.Diamonds)
    ]);
    const bob = new typedeck_1.Player('Bob', new typedeck_1.Hand([
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds)
    ]));
    const jane = new typedeck_1.Player('Jane', new typedeck_1.Hand([
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Clubs)
    ]));
    const scoring = service.scorePlayers([jane, bob], communityCards.getCards());
    t.true(scoring.get(bob).handType === typedeck_1.PokerHandType.Straight);
    t.true(scoring.get(jane).handType === typedeck_1.PokerHandType.Straight);
    t.true(scoring.get(jane).value > scoring.get(bob).value);
});
ava_1.test('throws error when scoring if less than 5 cards sent', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.PokerScoreService();
    const handResult = new typedeck_1.PokerHandResult(getHands(typedeck_1.PokerHandType.Straight)[0].splice(0, 3));
    try {
        service.getScoreRank(handResult);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Poker Scoring: Invalid cards provided. Please send at least 5 cards.');
    }
}));
//# sourceMappingURL=data:application/json;base64,