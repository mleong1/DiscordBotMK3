"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('empty without chips in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyChips = [];
    const chipCollection = new typedeck_1.ChipCollection();
    t.deepEqual(chipCollection.getChips(), emptyChips);
}));
ava_1.test('is empty with no chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    t.true(chipCollection.isEmpty(), 'isEmpty() should have been true');
}));
ava_1.test('has chips when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chips = [
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Black),
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue)
    ];
    const chipCollection = new typedeck_1.ChipCollection(chips);
    t.false(chipCollection.isEmpty(), 'was empty');
    t.deepEqual(chipCollection.getChips()[0], chips[0], 'Chips were not equivalent or added in same order');
    t.deepEqual(chipCollection.getChips()[1], chips[1], 'Chips were not equivalent or added in same order');
}));
ava_1.test('adds a single chip', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    chipCollection.addChip(chip1);
    t.false(chipCollection.isEmpty(), 'Chip was not added');
    t.true(chipCollection.getChipCount() === 1, 'Chip count not matching');
    t.deepEqual(chipCollection.getChips()[0], chip1, 'Chip that was added did not match entry in collection');
}));
ava_1.test('adds multiple chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    chipCollection.addChips([chip1, chip2]);
    t.false(chipCollection.isEmpty(), 'Chips were not added');
    t.deepEqual(chipCollection.getChips()[0], chip1, 'Chip that was added did not match entry in collection');
    t.deepEqual(chipCollection.getChips()[1], chip2, 'Chip that was added did not match entry in collection');
}));
ava_1.test('sets multiple chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.Chip(typedeck_1.ChipColor.Blue, typedeck_1.ChipColorType.Standard);
    const chip2 = new typedeck_1.Chip(typedeck_1.ChipColor.Blue, typedeck_1.ChipColorType.Standard);
    chipCollection.setChips([chip1, chip2]);
    t.false(chipCollection.isEmpty(), 'Chips were not added');
    t.deepEqual(chipCollection.getChips()[0], chip1, 'Chip that was added did not match entry in collection');
    t.deepEqual(chipCollection.getChips()[1], chip2, 'Chip that was added did not match entry in collection');
}));
ava_1.test('takes chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const takeChipValue = 3;
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    chipCollection.setChips([chip1, chip2]);
    const chipsPulled = chipCollection.takeValue(takeChipValue);
    const chipsPulledValue = chipsPulled.reduce((a, b) => a + b.getValue(), 0);
    t.deepEqual(chipsPulledValue, takeChipValue);
}));
ava_1.test('takes chips in odd amounts', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const takeChipValue = 67;
    const chipService = new typedeck_1.ChipService();
    const chipCollection = new typedeck_1.ChipCollection([...chipService.createChips(300)]);
    const chipsPulled = chipCollection.takeValue(takeChipValue);
    const chipsPulledValue = chipsPulled.reduce((a, b) => a + b.getValue(), 0);
    t.deepEqual(chipsPulledValue, takeChipValue);
}));
ava_1.test('removes no chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    chipCollection.setChips([chip1, chip2]);
    chipCollection.removeChips([]);
    t.deepEqual(chipCollection.getChipCount(), 2);
}));
ava_1.test('removes one chip', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    chipCollection.setChips([chip1, chip2]);
    chipCollection.removeChips([chip1]);
    t.deepEqual(chipCollection.getChipCount(), 1);
    t.deepEqual(chipCollection.getChips(), [chip2]);
}));
ava_1.test('index of chip is provided', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    const chip3 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Red);
    chipCollection.setChips([chip1, chip2, chip3]);
    const position = chipCollection.indexOfChip(chip2);
    t.true(position === 1);
}));
ava_1.test('index -1 for chip that doesnt exist', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    const chip3 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Red);
    const chip4 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Green);
    chipCollection.setChips([chip1, chip2, chip3]);
    const position = chipCollection.indexOfChip(chip4);
    t.true(position === -1);
}));
ava_1.test('takeValue throws error if more requested than in collection', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const takeChipValue = 300;
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    chipCollection.setChips([chip1, chip2]);
    const chipCollectionValue = chipCollection.getValue();
    try {
        chipCollection.takeValue(takeChipValue);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Not enough chips (${chipCollectionValue}) to satisfy requested amount ${takeChipValue}`);
    }
}));
ava_1.test('getValue returns all chips value', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    chipCollection.setChips([chip1, chip2]);
    const chipCollectionValue = chipCollection.getValue();
    t.true(chipCollectionValue === 110);
}));
ava_1.test('getValue can have chips passed in', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    const chip1 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Blue);
    const chip2 = new typedeck_1.StandardChip(typedeck_1.ChipColor.Black);
    const calculatedValue = chipCollection.getValue([chip1, chip2]);
    t.true(calculatedValue === 110);
}));
ava_1.test('can colorUp a collection with no chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    chipCollection.colorUp();
    t.pass('we did it!');
}));
ava_1.test('can colorUp a known collection of chips', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipCollection = new typedeck_1.ChipCollection();
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.White));
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.White));
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.White));
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.White));
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.White));
    chipCollection.addChip(new typedeck_1.StandardChip(typedeck_1.ChipColor.Red));
    chipCollection.colorUp();
    t.true(chipCollection.getChipCount() === 1, 'Didnt condense chips');
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcENvbGxlY3Rpb24uc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hpcENvbGxlY3Rpb24vY2hpcENvbGxlY3Rpb24uc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMkI7QUFDM0IsdUNBUWtCO0FBRWxCLFVBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ25ELE1BQU0sVUFBVSxHQUFZLEVBQUUsQ0FBQztJQUMvQixNQUFNLGNBQWMsR0FBRyxJQUFJLHlCQUFjLEVBQUUsQ0FBQztJQUM1QyxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDdkMsTUFBTSxjQUFjLEdBQUcsSUFBSSx5QkFBYyxFQUFFLENBQUM7SUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLHNDQUFzQyxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDckQsTUFBTSxLQUFLLEdBQVk7UUFDckIsSUFBSSx1QkFBWSxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksdUJBQVksQ0FBQyxvQkFBUyxDQUFDLElBQUksQ0FBQztLQUNqQyxDQUFDO0lBQ0YsTUFBTSxjQUFjLEdBQUcsSUFBSSx5QkFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFD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