"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('empty without cards in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyCards = [];
    const deck = new typedeck_1.Deck();
    t.deepEqual(deck.getCards(), emptyCards);
}));
ava_1.test('is empty with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const deck = new typedeck_1.Deck();
    t.true(deck.isEmpty(), 'isEmpty() should have been true');
}));
ava_1.test('has default name', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const deck = new typedeck_1.Deck();
    t.deepEqual(deck.name, 'Deck');
}));
ava_1.test('can assign name', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const deck = new typedeck_1.Deck();
    deck.name = 'Main Deck';
    t.deepEqual(deck.name, 'Main Deck');
}));
ava_1.test('has cards when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const deck = new typedeck_1.Deck(cards);
    t.false(deck.isEmpty(), 'was empty');
    t.deepEqual(deck.getCards()[0], cards[0], 'Cards were not equivalent or added in same order');
    t.deepEqual(deck.getCards()[1], cards[1], 'Cards were not equivalent or added in same order');
}));
ava_1.test('builds from another ICard[]', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const deck = typedeck_1.Deck.BuildFrom(cards);
    t.false(deck.isEmpty(), 'was empty');
    t.true(deck.getCount() === 2, 'Did not create expected number of cards');
}));
ava_1.test('builds from CardName and Suit combo', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const suits = [typedeck_1.Suit.Spades, typedeck_1.Suit.Hearts];
    const cardNames = [typedeck_1.CardName.Queen, typedeck_1.CardName.King];
    const deck = typedeck_1.Deck.Build(suits, cardNames);
    t.false(deck.isEmpty(), 'was empty');
    t.true(deck.getCount() === (suits.length * cardNames.length), 'Did not create expected number of cards');
    t.true(deck.hasCards([
        new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts)
    ]), 'Did not contain all expected cards');
}));
ava_1.test('builds from CardName and Suit combo with extras', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const suits = [typedeck_1.Suit.Spades, typedeck_1.Suit.Hearts];
    const cardNames = [typedeck_1.CardName.Queen, typedeck_1.CardName.King];
    const extras = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades)
    ];
    const deck = typedeck_1.Deck.Build(suits, cardNames, extras);
    t.false(deck.isEmpty(), 'was empty');
    t.true(deck.getCount() === (suits.length * cardNames.length) + extras.length, 'Did not create expected number of cards');
    t.true(deck.hasCards([
        new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades)
    ]), 'Did not contain all expected cards');
}));
ava_1.test('builds from with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const deck = typedeck_1.Deck.BuildFrom();
    t.true(deck.isEmpty(), 'was not empty');
}));
ava_1.test('creates a new Hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const suits = [typedeck_1.Suit.Spades, typedeck_1.Suit.Hearts, typedeck_1.Suit.Clubs];
    const cardNames = [typedeck_1.CardName.Queen, typedeck_1.CardName.King];
    const deck = typedeck_1.Deck.Build(suits, cardNames);
    const options = new typedeck_1.HandOptions();
    options.size = 4;
    const hand = deck.createHand(options);
    t.true(hand.getCount() === 4, 'Did not create hand with expected cards');
}));
ava_1.test('deals to a Hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const suits = [typedeck_1.Suit.Spades, typedeck_1.Suit.Hearts, typedeck_1.Suit.Clubs];
    const cardNames = [typedeck_1.CardName.Queen, typedeck_1.CardName.King];
    const deck = typedeck_1.Deck.Build(suits, cardNames);
    const hand = new typedeck_1.Hand();
    deck.deal(hand, 4);
    t.true(hand.getCount() === 4, 'Did not deal hand with expected cards');
}));
ava_1.test('deals to top of Hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Hearts)
    ];
    const deck = typedeck_1.Deck.BuildFrom(cards);
    const hand = new typedeck_1.Hand([
        new typedeck_1.JokerCard()
    ]);
    deck.deal(hand, 4, true);
    t.true(hand.getCount() === 5, 'Did not deal hand with expected cards');
    t.deepEqual(hand.takeCard(), new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds), 'Did not deal hand with expected cards');
}));
ava_1.test('deals to bottom of Hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Hearts)
    ];
    const deck = typedeck_1.Deck.BuildFrom(cards);
    const hand = new typedeck_1.Hand([
        new typedeck_1.JokerCard()
    ]);
    deck.deal(hand, 4, false);
    t.true(hand.getCount() === 5, 'Did not deal hand with expected cards');
    t.deepEqual(hand.takeCard(), new typedeck_1.JokerCard(), 'Did not deal hand with expected cards');
}));
//# sourceMappingURL=data:application/json;base64,