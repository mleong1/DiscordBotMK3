{"version":3,"file":"index.cjs.js","sources":["../../src/services/pokerScore.service.ts","../../src/common/indexedMap.model.ts","../../src/models/player/computerPlayer.model.ts","../../src/models/player/player.model.ts","../../src/models/gameType/texasHoldEmGameType.model.ts","../../src/models/gameType/heartsGameType.model.ts","../../src/models/gameType/solitaireGameType.model.ts","../../src/models/gameType/gameType.model.ts","../../src/models/chipCollection/chipCollection.model.ts","../../src/services/chip.service.ts","../../src/models/chip/californiaChip.model.ts","../../src/models/chip/standardChip.model.ts","../../src/models/chip/chip.model.ts","../../src/models/cardCollection/deck.model.ts","../../src/models/cardCollection/hand.model.ts","../../src/models/cardCollection/cardPile.model.ts","../../src/models/cardCollection/cardCollection.model.ts","../../src/models/poker/pokerHandResult.model.ts","../../src/models/card/aceLowRankSet.model.ts","../../src/models/card/aceHighRankSet.model.ts","../../src/models/card/cardRanks.model.ts","../../src/models/card/jokerCard.model.ts","../../src/models/card/playingCard.model.ts","../../src/models/card/card.model.ts","../../src/services/shuffle.service.ts","../../src/common/randomString.service.ts","../../src/models/cardCollection/deckOptions.model.ts","../../src/errors/pokerScoring.error.ts","../../src/errors/invalidArgument.error.ts","../../src/models/poker/pokerHandType.model.ts","../../src/common/iterableExtensions.model.ts","../../src/common/mapExtensions.model.ts","../../src/common/stringifyComparer.model.ts","../../src/models/player/difficulty.model.ts","../../src/models/chip/chipColorType.model.ts","../../src/models/chip/chipColor.model.ts","../../src/models/card/suit.model.ts","../../src/models/card/cardName.model.ts","../../src/models/cardCollection/handOptions.model.ts"],"sourcesContent":["import { PokerHandResult } from '../models/poker/pokerHandResult.model';\r\nimport { IHand } from '../models/cardCollection/hand.interface';\r\nimport { IPlayer } from '../models/player/player.interface';\r\nimport { IndexedMap } from '../common/indexedMap.model';\r\nimport { IPokerScoreService } from './pokerScoreService.interface';\r\nimport { PlayingCard } from '../models/card/playingCard.model';\r\nimport { PokerHandType } from '../models/poker/pokerHandType.model';\r\nimport { PokerScoringError } from '../errors/pokerScoring.error';\r\nimport { TexasHoldEmPokerGameType } from '../models/gameType/texasHoldEmGameType.model';\r\nimport { CardName } from '../models/card/cardName.model';\r\nimport { IterableExtensions } from '../common/iterableExtensions.model';\r\n\r\nexport class PokerScoreService implements IPokerScoreService {\r\n\r\n  private gameType = new TexasHoldEmPokerGameType();\r\n\r\n  public scoreHand (hand: IHand, communityCards: PlayingCard[] = []): PokerHandResult {\r\n    const playerHand = [...hand.getCards().concat(communityCards)];\r\n    if (playerHand.length < 5) {\r\n      throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');\r\n    }\r\n    return this.scoreCards(playerHand as PlayingCard[]);\r\n  }\r\n\r\n  public scoreCards (cards: PlayingCard[], communityCards: PlayingCard[] = []): PokerHandResult {\r\n    let bestHand = new PokerHandResult();\r\n    const playerCards = [...cards.concat(communityCards)];\r\n    if (playerCards.length < 5) {\r\n      throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');\r\n    }\r\n    // find best hand\r\n    for (const combination of IterableExtensions.Combinations(cards, 5)) {\r\n      const result = this.calculate(combination);\r\n      if (result.value > bestHand.value) {\r\n        bestHand = result;\r\n      }\r\n    }\r\n    return bestHand;\r\n  }\r\n\r\n  public scorePlayers (players: IPlayer[], communityCards: PlayingCard[] = []): IndexedMap<IPlayer, PokerHandResult> {\r\n    const result = new IndexedMap<IPlayer, PokerHandResult>();\r\n    players.forEach((player) => {\r\n      const playerHand = [...player.getHand().getCards().concat(communityCards)] as PlayingCard[];\r\n      if (playerHand.length < 5) {\r\n        throw new PokerScoringError(`Invalid cards provided for ${player}. Please send at least 5 cards.`);\r\n      }\r\n      const playerScore = this.scoreCards(playerHand);\r\n      result.add(player, playerScore);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public getScoreRank (result: PokerHandResult): number {\r\n    if (result.cards.length < 5) {\r\n      throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');\r\n    }\r\n    result.value = this.value(this.ranked(result.cards), result.handType as number);\r\n    return result.value;\r\n  }\r\n\r\n  private ranked (cards: PlayingCard[]): PlayingCard[][] {\r\n    // split cards by rank\r\n    let result: PlayingCard[][] = [];\r\n\r\n    for (let card of cards) {\r\n      let r = this.gameType.rankSet.getRankValue(card);\r\n      result[r] = result[r] || [];\r\n      result[r].push(card);\r\n    }\r\n\r\n    // condense\r\n    result = result.filter((rank) => !!rank);\r\n\r\n    // high to low\r\n    result.reverse();\r\n\r\n    // pairs and sets first\r\n    result.sort((a, b) => {\r\n      return a.length > b.length ? -1 : a.length < b.length ? 1 : 0;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private isStraight (ranked: PlayingCard[][]): boolean {\r\n    // must have 5 different cards\r\n    if (!ranked[4]) {\r\n      return false;\r\n    }\r\n\r\n    // could be wheel if r1 is 'ace' and r4 is '2'\r\n    if (ranked[0][0].cardName === CardName.Ace &&\r\n      ranked[1][0].cardName === CardName.Five &&\r\n      ranked[4][0].cardName === CardName.Two) {\r\n      // hand is 'ace' '5' '4' '3' '2'\r\n      ranked.push(ranked.shift() as PlayingCard[]);\r\n      // ace is now low\r\n      return true;\r\n    }\r\n\r\n    // run of five in row is straight\r\n    let r1 = this.gameType.rankSet.getRankValue(ranked[0][0]);\r\n    let r4 = this.gameType.rankSet.getRankValue(ranked[4][0]);\r\n    return (r1 - r4) === 4;\r\n  }\r\n\r\n  private isFlush (cards: PlayingCard[]): boolean {\r\n    // all suits match is flush\r\n    return cards.every((card: PlayingCard) => card.suit === cards[0].suit);\r\n  }\r\n\r\n  private value (ranked: PlayingCard[][], handType: PokerHandType): number {\r\n    // primary wins the rest are kickers\r\n    let str = '';\r\n\r\n    for (let rank of ranked) {\r\n      // create two digit value\r\n      let r = this.gameType.rankSet.getRankValue(rank[0]);\r\n      let v = (r < 10 ? '0' : '') + r;\r\n      for (let i = 0; i < rank.length; i++) {\r\n        // append value for each card\r\n        str += v;\r\n      }\r\n    }\r\n\r\n    // to integer\r\n    return (handType * 10000000000) + parseInt(str, 10);\r\n  }\r\n\r\n  private calculate (cards: PlayingCard[]): PokerHandResult {\r\n    let result: PokerHandResult;\r\n    let cardsUsed: PlayingCard[] = [];\r\n    let handType: PokerHandType;\r\n\r\n    const ranked: PlayingCard[][] = this.ranked(cards);\r\n    const isFlush = this.isFlush(cards);\r\n    const isStraight = this.isStraight(ranked);\r\n    const highestPlayedCards = ranked[0];\r\n    const rankSet = this.gameType.rankSet;\r\n\r\n    if (isStraight && isFlush && highestPlayedCards[0].cardName === CardName.Ace) {\r\n      cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];\r\n      handType = PokerHandType.RoyalFlush;\r\n    } else if (isStraight && isFlush) {\r\n      cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];\r\n      handType = PokerHandType.StraightFlush;\r\n    } else if (highestPlayedCards.length === 4) {\r\n      cardsUsed = ranked[0];\r\n      handType = PokerHandType.FourOfAKind;\r\n    } else if (ranked[0].length === 3 && ranked[1].length === 2) {\r\n      cardsUsed = ranked[0].concat(ranked[1]);\r\n      handType = PokerHandType.FullHouse;\r\n    } else if (isFlush) {\r\n      cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];\r\n      handType = PokerHandType.Flush;\r\n    } else if (isStraight) {\r\n      cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];\r\n      handType = PokerHandType.Straight;\r\n    } else if (highestPlayedCards.length === 3) {\r\n      cardsUsed = ranked[0];\r\n      handType = PokerHandType.ThreeOfAKind;\r\n    } else if (ranked[0].length === 2 && ranked[1].length === 2) {\r\n      cardsUsed = ranked[0].concat(ranked[1]);\r\n      handType = PokerHandType.TwoPair;\r\n    } else if (highestPlayedCards.length === 2) {\r\n      cardsUsed = ranked[0];\r\n      handType = PokerHandType.OnePair;\r\n    } else {\r\n      cardsUsed = ranked[0];\r\n      handType = PokerHandType.HighCard;\r\n    }\r\n    result = new PokerHandResult(cards, this.value(ranked, handType), cardsUsed, rankSet)\r\n      .setHandType(handType);\r\n    return result;\r\n  }\r\n}\r\n","import { MapIndexable } from './mapIndexable.interface';\r\n\r\n/**\r\n * Extension of ES6 Map<T, U> that enforces T\r\n * to implement `IIndexable`, so that when\r\n * `Map.has` checks its internal keys, the typical\r\n * `object === object` match won't fail, because\r\n * it will use the `IIndexable.getIndex()` value\r\n * as the key.\r\n */\r\nexport class IndexedMap<T extends MapIndexable, U> {\r\n  private internalMap: Map<string, U> = new Map<string, U>();\r\n\r\n  public add (item: T, value: U): this {\r\n    this.internalMap.set(item.getIndex(), value);\r\n    return this;\r\n  }\r\n\r\n  public get (item: T): U {\r\n    return this.internalMap.get(item.getIndex()) as U;\r\n  }\r\n\r\n  public contains (item: T): boolean {\r\n    return this.internalMap.has(item.getIndex());\r\n  }\r\n\r\n  public clear (): this {\r\n    this.internalMap.clear();\r\n    return this;\r\n  }\r\n\r\n  public delete (item: T): this {\r\n    this.internalMap.delete(item.getIndex());\r\n    return this;\r\n  }\r\n\r\n  public entries (): Map<string, U> {\r\n    return this.internalMap;\r\n  }\r\n}\r\n","import { Player } from './player.model';\r\nimport { IHand } from '../cardCollection/hand.interface';\r\nimport { Hand } from '../cardCollection/hand.model';\r\nimport { Difficulty } from './difficulty.model';\r\n\r\nexport class ComputerPlayer extends Player {\r\n\r\n  constructor (\r\n    name: string = '',\r\n    hand: IHand = new Hand(),\r\n    public difficulty: Difficulty = Difficulty.Normal) {\r\n    super(name, hand);\r\n  }\r\n\r\n  public static Create (fields?: ComputerPlayer): ComputerPlayer {\r\n    const name = (fields) ? fields.name : '';\r\n    const difficulty = (fields) ? fields.difficulty : Difficulty.Normal;\r\n    return new ComputerPlayer(\r\n      name,\r\n      new Hand(),\r\n      difficulty);\r\n  }\r\n\r\n  public setDifficulty (difficulty: Difficulty): this {\r\n    this.difficulty = difficulty;\r\n    return this;\r\n  }\r\n\r\n  public toString (): string {\r\n    return `Computer: ${this.name}`;\r\n  }\r\n}\r\n","import { MathRandomStringService } from '../../common/randomString.service';\r\nimport { IRandomStringService } from '../../common/randomStringService.interface';\r\nimport { IHand } from '../cardCollection/hand.interface';\r\nimport { Hand } from '../cardCollection/hand.model';\r\nimport { IPlayer } from './player.interface';\r\n\r\n/**\r\n * Represents a Player\r\n */\r\nexport class Player implements IPlayer {\r\n  public id: string;\r\n  public score: number = 0;\r\n\r\n  constructor (\r\n    public name: string = '',\r\n    private hand: IHand = new Hand(),\r\n    randomStringService: IRandomStringService = new MathRandomStringService()) {\r\n    this.id = randomStringService.get(7);\r\n  }\r\n\r\n  public updateScore (score: number): this {\r\n    this.score = score;\r\n    return this;\r\n  }\r\n\r\n  public getHand (): IHand {\r\n    return this.hand;\r\n  }\r\n\r\n  public setHand (hand: IHand): this {\r\n    this.hand = hand;\r\n    return this;\r\n  }\r\n\r\n  public toString (): string {\r\n    return `${this.name}`;\r\n  }\r\n\r\n  public getIndex (): string {\r\n    return this.id;\r\n  }\r\n}\r\n","import { BaseGameType } from './gameType.model';\r\nimport { ICard } from '../card/card.interface';\r\nimport { AceHighRankSet } from '../card/aceHighRankSet.model';\r\nimport { PlayingCard } from '../card/playingCard.model';\r\nimport { CardName } from '../card/cardName.model';\r\nimport { Suit } from '../card/suit.model';\r\n\r\n/**\r\n * GameType with Texas Hold'Em Poker configuration\r\n */\r\nexport class TexasHoldEmPokerGameType extends BaseGameType {\r\n  public rankSet = new AceHighRankSet();\r\n  public cardsAllowed: ICard[] = [\r\n    new PlayingCard(CardName.Ace, Suit.Clubs),\r\n    new PlayingCard(CardName.Two, Suit.Clubs),\r\n    new PlayingCard(CardName.Three, Suit.Clubs),\r\n    new PlayingCard(CardName.Four, Suit.Clubs),\r\n    new PlayingCard(CardName.Five, Suit.Clubs),\r\n    new PlayingCard(CardName.Six, Suit.Clubs),\r\n    new PlayingCard(CardName.Seven, Suit.Clubs),\r\n    new PlayingCard(CardName.Eight, Suit.Clubs),\r\n    new PlayingCard(CardName.Nine, Suit.Clubs),\r\n    new PlayingCard(CardName.Ten, Suit.Clubs),\r\n    new PlayingCard(CardName.Jack, Suit.Clubs),\r\n    new PlayingCard(CardName.Queen, Suit.Clubs),\r\n    new PlayingCard(CardName.King, Suit.Clubs),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Spades),\r\n    new PlayingCard(CardName.Two, Suit.Spades),\r\n    new PlayingCard(CardName.Three, Suit.Spades),\r\n    new PlayingCard(CardName.Four, Suit.Spades),\r\n    new PlayingCard(CardName.Five, Suit.Spades),\r\n    new PlayingCard(CardName.Six, Suit.Spades),\r\n    new PlayingCard(CardName.Seven, Suit.Spades),\r\n    new PlayingCard(CardName.Eight, Suit.Spades),\r\n    new PlayingCard(CardName.Nine, Suit.Spades),\r\n    new PlayingCard(CardName.Ten, Suit.Spades),\r\n    new PlayingCard(CardName.Jack, Suit.Spades),\r\n    new PlayingCard(CardName.Queen, Suit.Spades),\r\n    new PlayingCard(CardName.King, Suit.Spades),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Diamonds),\r\n    new PlayingCard(CardName.Two, Suit.Diamonds),\r\n    new PlayingCard(CardName.Three, Suit.Diamonds),\r\n    new PlayingCard(CardName.Four, Suit.Diamonds),\r\n    new PlayingCard(CardName.Five, Suit.Diamonds),\r\n    new PlayingCard(CardName.Six, Suit.Diamonds),\r\n    new PlayingCard(CardName.Seven, Suit.Diamonds),\r\n    new PlayingCard(CardName.Eight, Suit.Diamonds),\r\n    new PlayingCard(CardName.Nine, Suit.Diamonds),\r\n    new PlayingCard(CardName.Ten, Suit.Diamonds),\r\n    new PlayingCard(CardName.Jack, Suit.Diamonds),\r\n    new PlayingCard(CardName.Queen, Suit.Diamonds),\r\n    new PlayingCard(CardName.King, Suit.Diamonds),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Hearts),\r\n    new PlayingCard(CardName.Two, Suit.Hearts),\r\n    new PlayingCard(CardName.Three, Suit.Hearts),\r\n    new PlayingCard(CardName.Four, Suit.Hearts),\r\n    new PlayingCard(CardName.Five, Suit.Hearts),\r\n    new PlayingCard(CardName.Six, Suit.Hearts),\r\n    new PlayingCard(CardName.Seven, Suit.Hearts),\r\n    new PlayingCard(CardName.Eight, Suit.Hearts),\r\n    new PlayingCard(CardName.Nine, Suit.Hearts),\r\n    new PlayingCard(CardName.Ten, Suit.Hearts),\r\n    new PlayingCard(CardName.Jack, Suit.Hearts),\r\n    new PlayingCard(CardName.Queen, Suit.Hearts),\r\n    new PlayingCard(CardName.King, Suit.Hearts)\r\n  ];\r\n}\r\n","import { BaseGameType } from './gameType.model';\r\nimport { ICard } from '../card/card.interface';\r\nimport { AceHighRankSet } from '../card/aceHighRankSet.model';\r\nimport { CardName } from '../card/cardName.model';\r\nimport { Suit } from '../card/suit.model';\r\nimport { PlayingCard } from '../card/playingCard.model';\r\n\r\n/**\r\n * GameType with Hearts configuration\r\n */\r\nexport class HeartsGameType extends BaseGameType {\r\n  public rankSet = new AceHighRankSet();\r\n  public cardsAllowed: ICard[] = [\r\n    new PlayingCard(CardName.Ace, Suit.Clubs),\r\n    new PlayingCard(CardName.Two, Suit.Clubs),\r\n    new PlayingCard(CardName.Three, Suit.Clubs),\r\n    new PlayingCard(CardName.Four, Suit.Clubs),\r\n    new PlayingCard(CardName.Five, Suit.Clubs),\r\n    new PlayingCard(CardName.Six, Suit.Clubs),\r\n    new PlayingCard(CardName.Seven, Suit.Clubs),\r\n    new PlayingCard(CardName.Eight, Suit.Clubs),\r\n    new PlayingCard(CardName.Nine, Suit.Clubs),\r\n    new PlayingCard(CardName.Ten, Suit.Clubs),\r\n    new PlayingCard(CardName.Jack, Suit.Clubs),\r\n    new PlayingCard(CardName.Queen, Suit.Clubs),\r\n    new PlayingCard(CardName.King, Suit.Clubs),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Spades),\r\n    new PlayingCard(CardName.Two, Suit.Spades),\r\n    new PlayingCard(CardName.Three, Suit.Spades),\r\n    new PlayingCard(CardName.Four, Suit.Spades),\r\n    new PlayingCard(CardName.Five, Suit.Spades),\r\n    new PlayingCard(CardName.Six, Suit.Spades),\r\n    new PlayingCard(CardName.Seven, Suit.Spades),\r\n    new PlayingCard(CardName.Eight, Suit.Spades),\r\n    new PlayingCard(CardName.Nine, Suit.Spades),\r\n    new PlayingCard(CardName.Ten, Suit.Spades),\r\n    new PlayingCard(CardName.Jack, Suit.Spades),\r\n    new PlayingCard(CardName.Queen, Suit.Spades),\r\n    new PlayingCard(CardName.King, Suit.Spades),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Diamonds),\r\n    new PlayingCard(CardName.Two, Suit.Diamonds),\r\n    new PlayingCard(CardName.Three, Suit.Diamonds),\r\n    new PlayingCard(CardName.Four, Suit.Diamonds),\r\n    new PlayingCard(CardName.Five, Suit.Diamonds),\r\n    new PlayingCard(CardName.Six, Suit.Diamonds),\r\n    new PlayingCard(CardName.Seven, Suit.Diamonds),\r\n    new PlayingCard(CardName.Eight, Suit.Diamonds),\r\n    new PlayingCard(CardName.Nine, Suit.Diamonds),\r\n    new PlayingCard(CardName.Ten, Suit.Diamonds),\r\n    new PlayingCard(CardName.Jack, Suit.Diamonds),\r\n    new PlayingCard(CardName.Queen, Suit.Diamonds),\r\n    new PlayingCard(CardName.King, Suit.Diamonds),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Hearts),\r\n    new PlayingCard(CardName.Two, Suit.Hearts),\r\n    new PlayingCard(CardName.Three, Suit.Hearts),\r\n    new PlayingCard(CardName.Four, Suit.Hearts),\r\n    new PlayingCard(CardName.Five, Suit.Hearts),\r\n    new PlayingCard(CardName.Six, Suit.Hearts),\r\n    new PlayingCard(CardName.Seven, Suit.Hearts),\r\n    new PlayingCard(CardName.Eight, Suit.Hearts),\r\n    new PlayingCard(CardName.Nine, Suit.Hearts),\r\n    new PlayingCard(CardName.Ten, Suit.Hearts),\r\n    new PlayingCard(CardName.Jack, Suit.Hearts),\r\n    new PlayingCard(CardName.Queen, Suit.Hearts),\r\n    new PlayingCard(CardName.King, Suit.Hearts)\r\n  ];\r\n}\r\n","import { BaseGameType } from './gameType.model';\r\nimport { ICard } from '../card/card.interface';\r\nimport { AceLowRankSet } from '../card/aceLowRankSet.model';\r\nimport { PlayingCard } from '../card/playingCard.model';\r\nimport { CardName } from '../card/cardName.model';\r\nimport { Suit } from '../card/suit.model';\r\n\r\n/**\r\n * GameType with Solitaire configuration\r\n */\r\nexport class SolitaireGameType extends BaseGameType {\r\n  public rankSet = new AceLowRankSet();\r\n  public cardsAllowed: ICard[] = [\r\n    new PlayingCard(CardName.Ace, Suit.Clubs),\r\n    new PlayingCard(CardName.Two, Suit.Clubs),\r\n    new PlayingCard(CardName.Three, Suit.Clubs),\r\n    new PlayingCard(CardName.Four, Suit.Clubs),\r\n    new PlayingCard(CardName.Five, Suit.Clubs),\r\n    new PlayingCard(CardName.Six, Suit.Clubs),\r\n    new PlayingCard(CardName.Seven, Suit.Clubs),\r\n    new PlayingCard(CardName.Eight, Suit.Clubs),\r\n    new PlayingCard(CardName.Nine, Suit.Clubs),\r\n    new PlayingCard(CardName.Ten, Suit.Clubs),\r\n    new PlayingCard(CardName.Jack, Suit.Clubs),\r\n    new PlayingCard(CardName.Queen, Suit.Clubs),\r\n    new PlayingCard(CardName.King, Suit.Clubs),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Spades),\r\n    new PlayingCard(CardName.Two, Suit.Spades),\r\n    new PlayingCard(CardName.Three, Suit.Spades),\r\n    new PlayingCard(CardName.Four, Suit.Spades),\r\n    new PlayingCard(CardName.Five, Suit.Spades),\r\n    new PlayingCard(CardName.Six, Suit.Spades),\r\n    new PlayingCard(CardName.Seven, Suit.Spades),\r\n    new PlayingCard(CardName.Eight, Suit.Spades),\r\n    new PlayingCard(CardName.Nine, Suit.Spades),\r\n    new PlayingCard(CardName.Ten, Suit.Spades),\r\n    new PlayingCard(CardName.Jack, Suit.Spades),\r\n    new PlayingCard(CardName.Queen, Suit.Spades),\r\n    new PlayingCard(CardName.King, Suit.Spades),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Diamonds),\r\n    new PlayingCard(CardName.Two, Suit.Diamonds),\r\n    new PlayingCard(CardName.Three, Suit.Diamonds),\r\n    new PlayingCard(CardName.Four, Suit.Diamonds),\r\n    new PlayingCard(CardName.Five, Suit.Diamonds),\r\n    new PlayingCard(CardName.Six, Suit.Diamonds),\r\n    new PlayingCard(CardName.Seven, Suit.Diamonds),\r\n    new PlayingCard(CardName.Eight, Suit.Diamonds),\r\n    new PlayingCard(CardName.Nine, Suit.Diamonds),\r\n    new PlayingCard(CardName.Ten, Suit.Diamonds),\r\n    new PlayingCard(CardName.Jack, Suit.Diamonds),\r\n    new PlayingCard(CardName.Queen, Suit.Diamonds),\r\n    new PlayingCard(CardName.King, Suit.Diamonds),\r\n\r\n    new PlayingCard(CardName.Ace, Suit.Hearts),\r\n    new PlayingCard(CardName.Two, Suit.Hearts),\r\n    new PlayingCard(CardName.Three, Suit.Hearts),\r\n    new PlayingCard(CardName.Four, Suit.Hearts),\r\n    new PlayingCard(CardName.Five, Suit.Hearts),\r\n    new PlayingCard(CardName.Six, Suit.Hearts),\r\n    new PlayingCard(CardName.Seven, Suit.Hearts),\r\n    new PlayingCard(CardName.Eight, Suit.Hearts),\r\n    new PlayingCard(CardName.Nine, Suit.Hearts),\r\n    new PlayingCard(CardName.Ten, Suit.Hearts),\r\n    new PlayingCard(CardName.Jack, Suit.Hearts),\r\n    new PlayingCard(CardName.Queen, Suit.Hearts),\r\n    new PlayingCard(CardName.King, Suit.Hearts)\r\n  ];\r\n}\r\n","import { IGameType } from './gameType.interface';\r\nimport { IRankSet } from '../card/rankSet.interface';\r\nimport { AceHighRankSet } from '../card/aceHighRankSet.model';\r\nimport { ICard } from '../card/card.interface';\r\nimport { IDeck } from '../cardCollection/deck.interface';\r\nimport { DeckOptions } from '../cardCollection/deckOptions.model';\r\nimport { Deck } from '../cardCollection/deck.model';\r\n\r\nexport class BaseGameType implements IGameType {\r\n  public rankSet: IRankSet = new AceHighRankSet();\r\n  public cardsAllowed: ICard[] = [];\r\n\r\n  public createDeck (_options?: DeckOptions): IDeck {\r\n    if (_options) {\r\n      let gameCards: ICard[] = [];\r\n      for (let i = 0; i < _options.numberOfDecks; i++) {\r\n        gameCards.push(...this.cardsAllowed);\r\n      }\r\n      if (_options.extraCards && _options.extraCards.length > 0) {\r\n        gameCards = gameCards.concat(_options.extraCards);\r\n      }\r\n      return Deck.BuildFrom(gameCards);\r\n    } else {\r\n      return Deck.BuildFrom(this.cardsAllowed);\r\n    }\r\n  }\r\n}\r\n","import { IChip } from '../chip/chip.interface';\r\nimport { IChipCollection } from './chipCollection.interface';\r\nimport { IObjectComparer } from '../../common/objectComparer.interface';\r\nimport { StringifyComparer } from '../../common/stringifyComparer.model';\r\nimport { IChipService } from '../../services/chipService.interface';\r\nimport { ChipService } from '../../services/chip.service';\r\n\r\n/**\r\n * Basic class to represent a grouping of IChips.\r\n *\r\n * Supports activities like: getting chips,\r\n * adding chips, taking specific chip, taking\r\n * chips by value, getting value of chips.\r\n */\r\nexport class ChipCollection implements IChipCollection {\r\n  private objectComparer: IObjectComparer = new StringifyComparer();\r\n  private chipService: IChipService = new ChipService();\r\n\r\n  constructor (private chips: IChip[] = []) {\r\n  }\r\n\r\n  public addChip (chip: IChip): this {\r\n    return this.addChips([chip]);\r\n  }\r\n\r\n  public addChips (chips: IChip[]): this {\r\n    this.getChips().unshift(...chips);\r\n    return this;\r\n  }\r\n\r\n  public getChips (): IChip[] {\r\n    return this.chips;\r\n  }\r\n\r\n  public setChips (chips: IChip[]): this {\r\n    this.chips = chips;\r\n    return this;\r\n  }\r\n\r\n  public getChipCount (): number {\r\n    return this.getChips().length;\r\n  }\r\n\r\n  public isEmpty (): boolean {\r\n    return this.getChipCount() === 0;\r\n  }\r\n\r\n  public removeChips (chips: IChip[]): IChipCollection {\r\n    if (chips.length === 0) {\r\n      return this;\r\n    }\r\n    this.chipService.removeChipsFromStack(this.getChips(), chips);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Condense chips into fewer but larger denominations.\r\n   * Uses the first chip's class to create new colored chips with.\r\n   */\r\n  public colorUp (): IChipCollection {\r\n    if (this.getChipCount() === 0) {\r\n      return this;\r\n    }\r\n    const newChips = this.chipService.colorUp(this.getChips(), this.getChips()[0].constructor as any);\r\n    this.setChips(newChips);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns first identified index position of chip in\r\n   * collection.\r\n   * @param chip Object to search for in collection\r\n   */\r\n  public indexOfChip (chip: IChip): number {\r\n    for (let i = 0; i < this.getChipCount(); i++) {\r\n      const loopCard = this.getChips()[i];\r\n      if (this.objectComparer.areEquivalent(chip, loopCard)) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Return value of Chips currently in ChipCollection (via `IChipCollection.getChips()`).\r\n   * Optionally, can pass in `IChip[]` to evaluate a manually passed in value.\r\n   * @param chips Optional, value of passed in chips. If no chips passed in,\r\n   * it will evaluate value of current ChipCollection.\r\n   */\r\n  public getValue (chips?: IChip[] | undefined): number {\r\n    if (chips === undefined) {\r\n      chips = this.getChips();\r\n    }\r\n    return this.chipService.valueOfChips(chips);\r\n  }\r\n\r\n  /**\r\n   * Will pull `IChip`s from `IChipCollection` to satisfy\r\n   * the `amount` requested.\r\n   * @param amount Value to take from IChipCollection\r\n   */\r\n  public takeValue (amount: number): IChip[] {\r\n    const currentValue = this.getValue();\r\n    if (amount > currentValue) {\r\n      throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${amount}`);\r\n    }\r\n    return this.chipService.makeChange(this, amount, this.getChips()[0].constructor as any);\r\n  }\r\n}\r\n","import { IChipService } from './chipService.interface';\r\nimport { IChip } from '../models/chip/chip.interface';\r\nimport { IChipCollection } from '../models/chipCollection/chipCollection.interface';\r\nimport { ChipColor } from '../models/chip/chipColor.model';\r\nimport { Chip } from '../models/chip/chip.model';\r\nimport { StandardChip } from '../models/chip/standardChip.model';\r\nimport { IterableExtensions } from '../common/iterableExtensions.model';\r\n\r\nexport class ChipService implements IChipService {\r\n  /**\r\n   * The service should accept an `IChipCollection` and\r\n   * a requested specific amount of chip value, and be able to\r\n   * \"break\" or \"make change\" to swap out chips to meet that\r\n   * exact need. These chips are removed from the incoming\r\n   * `chipCollection` and the return value are chips that\r\n   * match the `needValue` requested.\r\n   * @param chipCollection Chips to create `needValue` from\r\n   * @param needValue Amount requested from chips\r\n   * @param chipType Class of Chip to return\r\n   */\r\n  public makeChange (\r\n      chipCollection: IChipCollection,\r\n      needValue: number,\r\n      chipType: typeof Chip = StandardChip,\r\n      colorUp: boolean = false): IChip[] {\r\n    const currentValue = chipCollection.getValue();\r\n    if (needValue > currentValue) {\r\n      throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${needValue}`);\r\n    } else if (needValue <= 0) {\r\n      throw new Error(`makeChange requires a positive Chip amount needed`);\r\n    }\r\n\r\n    if (colorUp && chipCollection.getChipCount() > 1) {\r\n      const coloredUp = this.sortByValue(this.colorUp(chipCollection.getChips(), chipType));\r\n      chipCollection.setChips(coloredUp);\r\n    }\r\n\r\n    // set aside high chips\r\n    let chips = this.sortByValue(chipCollection.getChips());\r\n    let highChips: IChip[] = [];\r\n    if (chipCollection.getChipCount() > 1) {\r\n      let n = chipCollection.getChipCount() - 1;\r\n      while (n > 0) {\r\n        if (this.valueOfChips(chips.slice(0, n)) > needValue) {\r\n          highChips.push(...chips.splice(n, 1));\r\n        } else {\r\n          break;\r\n        }\r\n        n--;\r\n      }\r\n    }\r\n\r\n    let matchedCombination = this.hasCombinationOfAmount(needValue, chips);\r\n    if (matchedCombination.length > 0) {\r\n      chipCollection.removeChips(matchedCombination);\r\n      return [...matchedCombination];\r\n    }\r\n\r\n    const breakChip = this.getNextChipToBreak(chips, needValue);\r\n    chipCollection.removeChips([breakChip]);\r\n    const newChips = this.createChips(breakChip.getValue(), false, chipType);\r\n    chipCollection.addChips([...newChips]);\r\n\r\n    return this.makeChange(chipCollection, needValue, chipType, false);\r\n  }\r\n\r\n  public sortByValue (chips: IChip[]): IChip[] {\r\n    return Array.from(chips)\r\n      .sort((a: IChip, b: IChip) => a.getValue() - b.getValue());\r\n  }\r\n\r\n  public createChips (\r\n      amount: number,\r\n      canBeSingleChip: boolean = true,\r\n      chipType: typeof Chip = StandardChip): IChip[] {\r\n    if (amount <= 0) {\r\n      return [];\r\n    }\r\n    let sampleChip = new chipType(ChipColor.White);\r\n    let sortedChips = Array.from(sampleChip.valueMap.entries())\r\n      .sort((a: [ChipColor, number], b: [ChipColor, number]) => {\r\n        return a[1] - b[1];\r\n      });\r\n    const chipsThatCanFulfillValue = sortedChips\r\n      .filter((combo: [ChipColor, number]) => combo[1] <= amount).length;\r\n    if (chipsThatCanFulfillValue === 1) {\r\n      canBeSingleChip = true;\r\n    }\r\n    let availableChips = sortedChips\r\n      .filter((combo: [ChipColor, number]) =>\r\n        canBeSingleChip ? combo[1] <= amount\r\n                        : combo[1] < amount)\r\n      .map<IChip>((entry: [ChipColor, number]) => new chipType(entry[0]));\r\n\r\n    if (availableChips.length < 1) {\r\n      throw new Error(`Incompatible Chip class to fulfill a value of '${amount}'`);\r\n    }\r\n    let index = availableChips.length - 1;\r\n    const createdChips: IChip[] = [];\r\n    while (amount >= availableChips[0].getValue()) {\r\n      if (amount >= availableChips[index].getValue()) {\r\n        amount -= availableChips[index].getValue();\r\n        createdChips.push(availableChips[index]);\r\n      } else {\r\n        index--;\r\n      }\r\n    }\r\n    return createdChips;\r\n  }\r\n\r\n  public valueOfChips (chips: IChip[]): number {\r\n    if (chips.length === 0) {\r\n      return 0;\r\n    }\r\n    return chips.reduce((a: number, b: IChip) => a + b.getValue(), 0);\r\n  }\r\n\r\n  public colorUp (chips: IChip[], chipType: typeof Chip = StandardChip): IChip[] {\r\n    const chipsValue = this.valueOfChips(chips);\r\n    const canBeSingleChip = true;\r\n    return this.createChips(chipsValue, canBeSingleChip, chipType);\r\n  }\r\n\r\n  public hasCombinationOfAmount (amount: number, chips: IChip[]): IChip[] {\r\n    const iteratedChips = this.sortByValue(chips);\r\n    let size = chips.length;\r\n    let foundCombination: IChip[] = [];\r\n    while (size > 0) {\r\n      for (let combination of IterableExtensions.Combinations(iteratedChips, size)) {\r\n        if (this.valueOfChips([...combination]) === amount) {\r\n          foundCombination = [...combination];\r\n          break; // close iterator\r\n        }\r\n      }\r\n      if (foundCombination.length > 0) {\r\n        return foundCombination;\r\n      }\r\n      size--;\r\n    }\r\n    return [] as IChip[];\r\n  }\r\n\r\n  public removeChipsFromStack (chips: IChip[], removeChips: IChip[]): IChip[] {\r\n    removeChips.forEach((chip: IChip) => {\r\n      for (let i = 0; i < chips.length; i++) {\r\n        if (chips[i].getIndex() === chip.getIndex()) {\r\n          chips.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    });\r\n    return chips;\r\n  }\r\n\r\n  private getNextChipToBreak (chips: IChip[], needValue: number): IChip {\r\n    const orderedChips = this.sortByValue(chips);\r\n    const reverseOrderedChips = [...orderedChips].reverse();\r\n    const pulledChips: IChip[] = [];\r\n\r\n    // find first largest chip at or under value\r\n    let i = 0;\r\n    let runningTotal = 0;\r\n    while (i < reverseOrderedChips.length - 1) {\r\n      const currentChip = reverseOrderedChips[i];\r\n      const addedChipValue = runningTotal + currentChip.getValue();\r\n      if (addedChipValue <= needValue) {\r\n        runningTotal = addedChipValue;\r\n        pulledChips.push(currentChip);\r\n      }\r\n      i++;\r\n    }\r\n    if (runningTotal > 0) {\r\n      let remainingChips = this.removeChipsFromStack([...orderedChips], pulledChips);\r\n      i = 0;\r\n      while (i < remainingChips.length - 1) {\r\n        const currentChip = remainingChips[i];\r\n        const addedChipValue = runningTotal + currentChip.getValue();\r\n        if (addedChipValue <= needValue) {\r\n          runningTotal = addedChipValue;\r\n        } else {\r\n          // we found our breakchip at remainingChips[i]\r\n          break;\r\n        }\r\n        i++;\r\n      }\r\n      return remainingChips[i];\r\n    } else {\r\n      return reverseOrderedChips[i];\r\n    }\r\n  }\r\n}\r\n","import { ChipColorType } from './chipColorType.model';\r\nimport { ChipColor } from './chipColor.model';\r\nimport { Chip } from './chip.model';\r\n\r\n/**\r\n * Represents a California valuing Chip\r\n */\r\nexport class CaliforniaChip extends Chip {\r\n  constructor (\r\n    color: ChipColor,\r\n    colorType: ChipColorType = ChipColorType.California,\r\n    overrideValue: number = 0) {\r\n    super(color, colorType, overrideValue);\r\n    this.configureDefaultColorValues();\r\n  }\r\n\r\n  private configureDefaultColorValues (): void {\r\n    this\r\n      .setColorValue(ChipColor.Blue, 1)\r\n      .setColorValue(ChipColor.Green, 2)\r\n      .setColorValue(ChipColor.Red, 3)\r\n      .setColorValue(ChipColor.Yellow, 5)\r\n      .setColorValue(ChipColor.Brown, 10)\r\n      .setColorValue(ChipColor.Black, 20)\r\n      .setColorValue(ChipColor.Purple, 25)\r\n      .setColorValue(ChipColor.White, 100)\r\n      .setColorValue(ChipColor.Gray, 500);\r\n  }\r\n}\r\n","import { ChipColorType } from './chipColorType.model';\r\nimport { ChipColor } from './chipColor.model';\r\nimport { Chip } from './chip.model';\r\n\r\n/**\r\n * Represents a Standard valuing Chip\r\n */\r\nexport class StandardChip extends Chip {\r\n  constructor (\r\n    color: ChipColor,\r\n    colorType: ChipColorType = ChipColorType.Standard,\r\n    overrideValue: number = 0) {\r\n    super(color, colorType, overrideValue);\r\n    this.configureDefaultColorValues();\r\n  }\r\n\r\n  private configureDefaultColorValues (): void {\r\n    this\r\n      .setColorValue(ChipColor.White, 1)\r\n      .setColorValue(ChipColor.Red, 5)\r\n      .setColorValue(ChipColor.Blue, 10)\r\n      .setColorValue(ChipColor.Gray, 20)\r\n      .setColorValue(ChipColor.Green, 25)\r\n      .setColorValue(ChipColor.Black, 100);\r\n  }\r\n}\r\n","import { IChip } from './chip.interface';\r\nimport { ChipColor } from './chipColor.model';\r\nimport { ChipColorType } from './chipColorType.model';\r\n\r\n/**\r\n * Represents a generic chip - typically used\r\n * in Poker style games.\r\n */\r\nexport class Chip implements IChip {\r\n  public valueMap = new Map<ChipColor, number>();\r\n\r\n  constructor (\r\n    public color: ChipColor,\r\n    public colorType: ChipColorType = ChipColorType.Standard,\r\n    public overrideValue: number = 0) {\r\n  }\r\n\r\n  public toString (): string {\r\n    return `${ChipColor[this.color]}`;\r\n  }\r\n\r\n  public getValue (_color: ChipColor = this.color): number {\r\n    if (this.overrideValue !== 0) {\r\n      return this.overrideValue;\r\n    }\r\n    if (this.valueMap.has(_color)) {\r\n      return this.valueMap.get(_color) as number;\r\n    } else {\r\n      throw new Error(\r\n        // tslint:disable-next-line:max-line-length\r\n        `Unable to determine value of ${ChipColor[_color]} Chip for ${ChipColorType[this.colorType]}`\r\n      );\r\n    }\r\n  }\r\n\r\n  public setValue (amount: number): this {\r\n    this.overrideValue = amount;\r\n    return this;\r\n  }\r\n\r\n  public setColorValue (color: ChipColor, amount: number): this {\r\n    this.valueMap.set(color, amount);\r\n    return this;\r\n  }\r\n\r\n  public getIndex (): string {\r\n    return this.toString();\r\n  }\r\n}\r\n","import { Suit } from '../card/suit.model';\r\nimport { CardName } from '../card/cardName.model';\r\nimport { PlayingCard } from '../card/playingCard.model';\r\nimport { CardPile } from './cardPile.model';\r\nimport { ICard } from '../card/card.interface';\r\nimport { HandOptions } from './handOptions.model';\r\n\r\nimport { IHand } from './hand.interface';\r\nimport { Hand } from './hand.model';\r\n\r\nimport { IDeck } from './deck.interface';\r\n\r\n/**\r\n * Deck represents the source of cards in play. As such,\r\n * a Deck is merely a pile of cards that are drawn from\r\n * throughout the duration of the ongoing game.\r\n */\r\nexport class Deck extends CardPile implements IDeck {\r\n  public name = 'Deck';\r\n  constructor (cards: ICard[] = []) {\r\n    super(cards);\r\n  }\r\n\r\n  public static BuildFrom (cards: ICard[] = []): Deck {\r\n    return new Deck(cards);\r\n  }\r\n\r\n  public static Build (suits: Suit[], cardNames: CardName[], extraCards: ICard[] = []): Deck {\r\n    let cards: ICard[] = [];\r\n\r\n    suits.forEach((suit) =>\r\n      cardNames.forEach((cardName) =>\r\n        cards.push(new PlayingCard(cardName, suit))));\r\n\r\n    if (extraCards && extraCards.length > 0) {\r\n      cards = cards.concat(extraCards);\r\n    }\r\n\r\n    return new Deck(cards);\r\n  }\r\n\r\n  public createHand (options: HandOptions): IHand {\r\n    const hand = new Hand();\r\n    this.deal(hand, options.size, false);\r\n    return hand;\r\n  }\r\n\r\n  public deal (hand: IHand, /** Amount of cards to deal into Hand */ size: number, /** Deal cards to top of hand */ frontOfHand: boolean = false): this {\r\n    if (frontOfHand) {\r\n      hand.addCards(this.takeCards(size));\r\n    } else {\r\n      hand.addCardsToBottom(this.takeCards(size));\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","import { Suit } from '../card/suit.model';\r\nimport { CardPile } from './cardPile.model';\r\nimport { MapExtensions } from '../../common/mapExtensions.model';\r\nimport { IHand } from './hand.interface';\r\nimport { ICard } from '../card/card.interface';\r\nimport { IRankSet } from '../card/rankSet.interface';\r\n\r\n/**\r\n * Represents a group of cards assigned to an IPlayer\r\n */\r\nexport class Hand extends CardPile implements IHand {\r\n  public name = 'Hand';\r\n  public suitOrder: Suit[] = [Suit.Clubs, Suit.Spades, Suit.Diamonds, Suit.Hearts];\r\n\r\n  constructor (cards: ICard[] = []) {\r\n    super(cards); // CardPile.constructor\r\n  }\r\n\r\n  /**\r\n   * Performs action of removing a card from player hand.\r\n   *\r\n   * Throws error if `ICard` played is not in player's hand.\r\n   * @param card - Card being played\r\n   */\r\n  public playCard (card: ICard): void {\r\n    this.removeCards([card]);\r\n  }\r\n\r\n  /**\r\n   * Order cards in Hand by Rank and Suit\r\n   * @see Hand.suitOrder\r\n   */\r\n  public sortCards (cardRank: IRankSet): this {\r\n    const cards = this.getCards();\r\n    if (this.isEmpty()) {\r\n      throw new Error('No cards to sort');\r\n    }\r\n    if (this.suitOrder.length === 0) {\r\n      throw new Error('No suit order defined');\r\n    }\r\n\r\n    let sortedCardsBySuit: ICard[] = [];\r\n    const cardsBySuit = new Map<Suit, ICard[]>(\r\n      Array.from(MapExtensions.GroupBy(cards, (card: any) => this.suitOrder.indexOf(card.suit)).entries()).sort()\r\n    );\r\n\r\n    cardsBySuit.forEach((suitCards: ICard[]) => {\r\n      sortedCardsBySuit = sortedCardsBySuit.concat(suitCards.sort((a: ICard, b: ICard) => {\r\n        return cardRank.getRankValue(a) - cardRank.getRankValue(b);\r\n      }));\r\n    });\r\n\r\n    this.setCards(sortedCardsBySuit);\r\n    return this;\r\n  }\r\n}\r\n","import { CardCollection } from './cardCollection.model';\r\nimport { ICardPile } from './cardPile.interface';\r\nimport { ICard } from '../card/card.interface';\r\n\r\n/**\r\n * Extending the basic CardCollection, this class supports\r\n * dealing with cards in an ordered pile. As such, interacting\r\n * with the pile from the bottom is supported by using this\r\n * class.\r\n */\r\nexport class CardPile extends CardCollection implements ICardPile {\r\n  public name = 'Pile';\r\n  constructor (cards: ICard[] = []) {\r\n    super(cards); // CardCollection.constructor\r\n  }\r\n\r\n  public addCardsToBottom (cards: ICard[]): void {\r\n    this.setCards(this.getCards().concat(cards));\r\n  }\r\n\r\n  public takeCardFromBottom (): ICard {\r\n    if (!this.isEmpty()) {\r\n      return this.getCards().pop() as ICard;\r\n    }\r\n    throw new Error('No cards remaining in pile');\r\n  }\r\n\r\n  public takeCardsFromBottom (amount: number): ICard[] {\r\n    let pulledCards: ICard[] = [];\r\n    while (!this.isEmpty() && pulledCards.length < amount) {\r\n      pulledCards.push(this.getCards().pop() as ICard);\r\n    }\r\n    return pulledCards;\r\n  }\r\n}\r\n","import { ICard } from '../card/card.interface';\r\nimport { DurstenfeldShuffleService } from '../../services/shuffle.service';\r\nimport { ICardCollection } from './cardCollection.interface';\r\nimport { IShuffleService } from '../../services/shuffleService.interface';\r\nimport { IObjectComparer } from '../../common/objectComparer.interface';\r\nimport { StringifyComparer } from '../../common/stringifyComparer.model';\r\n\r\n/**\r\n * Basic class to represent a grouping of ICards.\r\n *\r\n * Supports activities like: getting list of cards,\r\n * adding cards to group, taking first card, taking\r\n * multiple cards, getting count of cards, and shuffling\r\n * the cards.\r\n */\r\nexport class CardCollection implements ICardCollection {\r\n  /**\r\n   * Friendly name of card collection that\r\n   * means something: \"Hand\", \"Discard Pile\",\r\n   * \"In Play\", etc.\r\n   */\r\n  public name: string = '';\r\n  private shuffleService: IShuffleService = new DurstenfeldShuffleService();\r\n  private objectComparer: IObjectComparer = new StringifyComparer();\r\n\r\n  constructor (private cards: ICard[] = []) {\r\n\r\n  }\r\n\r\n  public addCard (card: ICard): this {\r\n    return this.addCards([card]);\r\n  }\r\n\r\n  public addCards (cards: ICard[]): this {\r\n    this.getCards().unshift(...cards);\r\n    return this;\r\n  }\r\n\r\n  public removeCards (cards: ICard[]): this {\r\n    cards.forEach((card) => {\r\n      const position: number = this.indexOfCard(card);\r\n      if (position > -1) {\r\n        this.getCards().splice(position, 1);\r\n      } else {\r\n        throw new Error('Card does not exist in collection');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public takeCard (): ICard {\r\n    if (!this.isEmpty()) {\r\n      return this.getCards().shift() as ICard;\r\n    }\r\n    throw new Error('No cards remaining in pile');\r\n  }\r\n\r\n  /**\r\n   * Remove cards from hand.\r\n   * @param amount Amount of cards to remove from Hand. If less than 1, all cards are taken.\r\n   */\r\n  public takeCards (amount: number): ICard[] {\r\n    if (!amount || amount < 1) {\r\n      amount = this.getCount();\r\n    }\r\n    // tslint:disable-next-line:prefer-const\r\n    let pulledCards: ICard[] = [];\r\n    while (!this.isEmpty() && pulledCards.length < amount) {\r\n      pulledCards.push(this.getCards().shift() as ICard);\r\n    }\r\n    return pulledCards;\r\n  }\r\n\r\n  public getCards (): ICard[] {\r\n    return this.cards;\r\n  }\r\n\r\n  public setCards (cards: ICard[]): this {\r\n    this.cards = cards;\r\n    return this;\r\n  }\r\n\r\n  public hasCard (card: ICard): boolean {\r\n    return this.getCards().some((c: ICard) => c.getIndex() === card.getIndex());\r\n  }\r\n\r\n  public hasCards (cards: ICard[]): boolean {\r\n    if (!this.hasCard(cards.shift() as ICard)) {\r\n      return false;\r\n    }\r\n    if (cards && cards.length > 0) {\r\n      return this.hasCards(cards);\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public getCount (): number {\r\n    return this.getCards().length;\r\n  }\r\n\r\n  public isEmpty (): boolean {\r\n    return this.getCount() === 0;\r\n  }\r\n\r\n  public shuffle (): void {\r\n    this.setCards(this.shuffleService.shuffle(this.getCards()));\r\n  }\r\n\r\n  public indexOfCard (card: ICard): number {\r\n    for (let i = 0; i < this.getCount(); i++) {\r\n      const loopCard = this.getCards()[i];\r\n      if (this.objectComparer.areEquivalent(card, loopCard)) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public cardAtIndex (index: number): ICard {\r\n    if (index >= 0 && index <= (this.getCount() - 1)) {\r\n      return this.getCards()[index];\r\n    } else {\r\n      throw new Error('Card collection does not contain card at index');\r\n    }\r\n  }\r\n}\r\n","import { PokerHandType } from './pokerHandType.model';\r\nimport { PlayingCard } from '../card/playingCard.model';\r\nimport { IRankSet } from '../card/rankSet.interface';\r\nimport { AceHighRankSet } from '../card/aceHighRankSet.model';\r\nimport { CardName } from '../card/cardName.model';\r\n\r\nexport class PokerHandResult {\r\n  /**\r\n   * Type of hand created with\r\n   * `cardsUsed`.\r\n   */\r\n  public handType: PokerHandType | undefined;\r\n  /**\r\n   * Comparable value of current hand\r\n   * to rank above or below another\r\n   * `PokerHandResult`.\r\n   */\r\n  public value: number = 0;\r\n  /**\r\n   * All cards used to determine\r\n   * result.\r\n   */\r\n  public cards: PlayingCard[] = [];\r\n  /**\r\n   * Cards in result.\r\n   */\r\n  public cardsUsed: PlayingCard[] = [];\r\n  /**\r\n   * RankSet used to help determine highest ranked kickers\r\n   * not used in hand score\r\n   */\r\n  public rankSet: IRankSet;\r\n  /**\r\n   * Cards that were used when scoring the hand\r\n   * but had no impact on the score itself. Used to\r\n   * help determine a winner in event of a tied score value.\r\n   */\r\n  public get kickers (): PlayingCard[] {\r\n    const cardsNotUsedInResult =\r\n      this.cards.filter((c) => this.cardsUsed.map(u => u.getIndex()).indexOf(c.getIndex()) === -1)\r\n        .sort((a, b) => this.rankSet.getRankValue(b) - this.rankSet.getRankValue(a));\r\n    return [...cardsNotUsedInResult];\r\n  }\r\n  /**\r\n   * Unique list of `CardName` objects that had a play\r\n   * in `PokerHandResult.value`.\r\n   *\r\n   * If you want every card that played a part\r\n   * in the value, see the `PokerHandResult.cardsUsed` property.\r\n   */\r\n  public get scoringHandCardNames (): CardName[] {\r\n    const sortedCardsUsed =\r\n      this.cardsUsed.sort((a, b) => this.rankSet.getRankValue(b) - this.rankSet.getRankValue(a));\r\n    const uniqueCardNames = new Set<CardName>(sortedCardsUsed.map(c => c.cardName));\r\n    return [...uniqueCardNames];\r\n  }\r\n\r\n  constructor (\r\n    cards: PlayingCard[] = [],\r\n    value: number = 0,\r\n    cardsUsed: PlayingCard[] = [],\r\n    rankSet = new AceHighRankSet()\r\n  ) {\r\n    this.cards = cards;\r\n    this.value = value;\r\n    this.cardsUsed = cardsUsed;\r\n    this.rankSet = rankSet;\r\n  }\r\n\r\n  setHandType (type: PokerHandType): this {\r\n    this.handType = type;\r\n    return this;\r\n  }\r\n\r\n  toString (): string {\r\n    if (this.handType === undefined) {\r\n      return '';\r\n    }\r\n\r\n    return PokerHandType[this.handType]\r\n      // Look for long acronyms and filter out the last letter\r\n      .replace(/([A-Z]+)([A-Z][a-z])/g, ' $1 $2')\r\n      // Look for lower-case letters followed by upper-case letters\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1 $2')\r\n      // Look for lower-case letters followed by numbers\r\n      .replace(/([a-zA-Z])(\\d)/g, '$1 $2')\r\n      .replace(/^./, function (str) { return str.toUpperCase(); })\r\n      // Remove any white space left around the word\r\n      .trim();\r\n  }\r\n}\r\n","import { CardName } from './cardName.model';\r\nimport { RankSet } from './cardRanks.model';\r\n\r\nexport class AceLowRankSet extends RankSet {\r\n  public rankSet: CardName[] = [\r\n    CardName.Joker,\r\n    CardName.Ace,\r\n    CardName.Two,\r\n    CardName.Three,\r\n    CardName.Four,\r\n    CardName.Five,\r\n    CardName.Six,\r\n    CardName.Seven,\r\n    CardName.Eight,\r\n    CardName.Nine,\r\n    CardName.Ten,\r\n    CardName.Jack,\r\n    CardName.Queen,\r\n    CardName.King\r\n  ];\r\n}\r\n","import { CardName } from './cardName.model';\r\nimport { RankSet } from './cardRanks.model';\r\n\r\nexport class AceHighRankSet extends RankSet {\r\n  public rankSet: CardName[] = [\r\n    CardName.Joker,\r\n    CardName.Two,\r\n    CardName.Three,\r\n    CardName.Four,\r\n    CardName.Five,\r\n    CardName.Six,\r\n    CardName.Seven,\r\n    CardName.Eight,\r\n    CardName.Nine,\r\n    CardName.Ten,\r\n    CardName.Jack,\r\n    CardName.Queen,\r\n    CardName.King,\r\n    CardName.Ace\r\n  ];\r\n}\r\n","import { CardName } from './cardName.model';\r\nimport { ICard } from './card.interface';\r\nimport { IRankSet } from './rankSet.interface';\r\n\r\nexport class RankSet implements IRankSet {\r\n  public rankSet: CardName[] = [];\r\n  public cardHigherThan (thisCard: ICard, compareCard: ICard): boolean {\r\n    return this.getRankValue(thisCard) > this.getRankValue(compareCard);\r\n  }\r\n  public getRankValue (card: ICard): number {\r\n    return this.rankSet.indexOf(card.cardName);\r\n  }\r\n}\r\n","import { Card } from './card.model';\r\nimport { CardName } from './cardName.model';\r\n\r\n/**\r\n * Represents a Joker card which is\r\n * not contained within any specific Suit\r\n * and can have a value based on current Game (if any/if used).\r\n */\r\nexport class JokerCard extends Card {\r\n  constructor (cardName: CardName = CardName.Joker) {\r\n    super(cardName);\r\n  }\r\n}\r\n","import { Card } from './card.model';\r\nimport { Suit } from './suit.model';\r\nimport { CardName } from './cardName.model';\r\n\r\n/**\r\n * Represents a card that contains a Suit\r\n * and a Value (Rank).\r\n */\r\nexport class PlayingCard extends Card {\r\n  public suit: Suit;\r\n\r\n  constructor (cardName: CardName, suit: Suit) {\r\n    super(cardName);\r\n    this.suit = suit;\r\n  }\r\n\r\n  public toString (): string {\r\n    return `${CardName[this.cardName]} of ${Suit[this.suit]}`;\r\n  }\r\n}\r\n","import { CardName } from './cardName.model';\r\nimport { ICard } from './card.interface';\r\n\r\n/**\r\n * Represents a generic card.\r\n */\r\nexport class Card implements ICard {\r\n  public cardName: CardName;\r\n\r\n  constructor (cardName: CardName) {\r\n    this.cardName = cardName;\r\n  }\r\n\r\n  public toString (): string {\r\n    return `${CardName[this.cardName]}`;\r\n  }\r\n\r\n  public getIndex (): string {\r\n    return this.toString();\r\n  }\r\n}\r\n","import { IShuffleService } from './shuffleService.interface';\r\nimport { ICard } from '../models/card/card.interface';\r\n\r\n/**\r\n * Shuffle one card to a random location\r\n * for each card in the deck.\r\n *\r\n * If one card or less is provided, an Error\r\n * will throw that the cards could not be shuffled.\r\n */\r\nexport class DurstenfeldShuffleService implements IShuffleService {\r\n  /**\r\n   * Durstenfeld shuffle algorithm\r\n   */\r\n  public shuffle (cards: ICard[]): ICard[] {\r\n    const length = cards.length;\r\n    if (length < 2) {\r\n      throw new Error('Not enough cards to shuffle');\r\n    }\r\n    for (let i = length; i; i--) {\r\n      const n = Math.floor(Math.random() * i);\r\n      [cards[i - 1], cards[n]] = [cards[n], cards[i - 1]];\r\n    }\r\n    return cards;\r\n  }\r\n}\r\n","import { IRandomStringService } from './randomStringService.interface';\r\n\r\n/**\r\n * Generate a random string\r\n */\r\nexport class MathRandomStringService implements IRandomStringService {\r\n  public get (length: number, charSet?: string): string {\r\n    let text = '';\r\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < length; i++) {\r\n      text += charSet.charAt(Math.floor(Math.random() * charSet.length));\r\n    }\r\n    return text;\r\n  }\r\n}\r\n","import { ICard } from '../card/card.interface';\r\n\r\nexport class DeckOptions {\r\n  public extraCards: ICard[] = [];\r\n  public numberOfDecks = 1;\r\n}\r\n","export class PokerScoringError extends Error {\r\n  constructor (message?: string) {\r\n    super(`Poker Scoring: ${message || ''}`);\r\n  }\r\n}\r\n","export class InvalidArgumentError extends Error {\r\n  constructor (message?: string) {\r\n    super(`Invalid Argument: ${message || ''}`);\r\n  }\r\n}\r\n","export enum PokerHandType {\r\n    HighCard,\r\n    OnePair,\r\n    TwoPair,\r\n    ThreeOfAKind,\r\n    Straight,\r\n    Flush,\r\n    FullHouse,\r\n    FourOfAKind,\r\n    StraightFlush,\r\n    RoyalFlush\r\n}\r\n","/**\r\n * Contains `static` methods which expose\r\n * iterable helpers. These methods can be found\r\n * in `aureooms/js-itertools` - https://aureooms.github.io/js-itertools/.\r\n *\r\n * The functions were adapted to fit needs, including adding generics support for\r\n * tooling assistance.\r\n */\r\nexport class IterableExtensions {\r\n  /**\r\n   * Generator function to return combinations of an iterable object\r\n   * Intended for use in `for..of` loops.\r\n   * @param iterable object array to produce combinations of\r\n   * @param size returns combination results of specified size\r\n   */\r\n  /* istanbul ignore next */\r\n  public static * Combinations<T> (iterable: T[], size: number): IterableIterator<T[]> {\r\n    let pool = Array.from(iterable);\r\n    if (size > pool.length) {\r\n      return [];\r\n    }\r\n\r\n    let indices = Array.from(this.Range(0, size, 1));\r\n\r\n    yield Array.from(this.Pick(pool, indices));\r\n\r\n    while (true) {\r\n      let i = size - 1;\r\n      while (true) {\r\n        if (i < 0) {\r\n          return [];\r\n        }\r\n        if (indices[i] !== (i + pool.length - size)) {\r\n          let pivot = ++indices[i];\r\n          for (++i; i < size; ++i) {\r\n            indices[i] = ++pivot;\r\n          }\r\n          break;\r\n        }\r\n        --i;\r\n      }\r\n      yield Array.from(this.Pick(pool, indices));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generator function to yield objects in list.\r\n   * Intended for use in `for..of` loops.\r\n   * @param object object to pick from\r\n   * @param keys indexes of the object\r\n   */\r\n  public static * Pick<T> (object: T[], keys: any) {\r\n    for (let key of keys) {\r\n      yield object[key];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an iterable range of numbers\r\n   * Intended for use in `for..of` loops.\r\n   * @param start First number returned from iterated range\r\n   * @param stop Will stop before this number\r\n   * @param step Steps between `start` and `stop`\r\n   */\r\n  public static * Range (start: number, stop: number, step: number) {\r\n    if (step < 0) {\r\n      for (; start > stop; start += step) yield start;\r\n    } else {\r\n      for (; start < stop; start += step) yield start;\r\n    }\r\n  }\r\n}\r\n","export class MapExtensions {\r\n  /**\r\n   * Handy method to create an ES6 Map\r\n   * with a grouping of keys.\r\n   *\r\n   * https://stackoverflow.com/a/38327540\r\n   *\r\n   * @example\r\n   *\r\n   * MapExtensions.GroupBy(cards, card => card.suit);\r\n   *\r\n   * @param list Array of objects to group\r\n   * @param keyGetter Key to group by. \"obj => obj.key\"\r\n   */\r\n  public static GroupBy<T> (list: T[], keyGetter: any): Map<any, T[]> {\r\n    const map = new Map<any, T[]>();\r\n    list.forEach((item) => {\r\n      const key = keyGetter(item);\r\n      const collection = map.get(key);\r\n      if (!collection) {\r\n        map.set(key, [item]);\r\n      } else {\r\n        collection.push(item);\r\n      }\r\n    });\r\n    return map;\r\n  }\r\n}\r\n","import { IObjectComparer } from './objectComparer.interface';\r\n\r\n/**\r\n * Compares objects using `JSON.stringify`\r\n */\r\nexport class StringifyComparer implements IObjectComparer {\r\n  public areEquivalent (objA: any, objB: any): boolean {\r\n    return JSON.stringify(objA) === JSON.stringify(objB);\r\n  }\r\n}\r\n","export enum Difficulty {\r\n  Easy,\r\n  Normal,\r\n  Hard,\r\n  Expert\r\n}\r\n","export enum ChipColorType {\r\n  Standard,\r\n  California,\r\n  WynnLasVegas\r\n}\r\n","export enum ChipColor {\r\n  Red,\r\n  Blue,\r\n  Green,\r\n  Black,\r\n  White,\r\n  Pink,\r\n  Gold,\r\n  Yellow,\r\n  Purple,\r\n  Brown,\r\n  Gray\r\n}\r\n","export enum Suit {\r\n  Clubs,\r\n  Spades,\r\n  Diamonds,\r\n  Hearts\r\n}\r\n","export enum CardName {\r\n  Ace,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Nine,\r\n  Ten,\r\n  Jack,\r\n  Queen,\r\n  King,\r\n  Joker\r\n}\r\n","export class HandOptions {\r\n  public size = 7;\r\n}\r\n"],"names":["PokerHandType","CardName","Difficulty","Suit","ChipColor","ChipColorType"],"mappings":"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"}