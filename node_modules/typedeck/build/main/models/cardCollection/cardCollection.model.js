"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shuffle_service_1 = require("../../services/shuffle.service");
const stringifyComparer_model_1 = require("../../common/stringifyComparer.model");
/**
 * Basic class to represent a grouping of ICards.
 *
 * Supports activities like: getting list of cards,
 * adding cards to group, taking first card, taking
 * multiple cards, getting count of cards, and shuffling
 * the cards.
 */
class CardCollection {
    constructor(cards = []) {
        this.cards = cards;
        /**
         * Friendly name of card collection that
         * means something: "Hand", "Discard Pile",
         * "In Play", etc.
         */
        this.name = '';
        this.shuffleService = new shuffle_service_1.DurstenfeldShuffleService();
        this.objectComparer = new stringifyComparer_model_1.StringifyComparer();
    }
    addCard(card) {
        return this.addCards([card]);
    }
    addCards(cards) {
        this.getCards().unshift(...cards);
        return this;
    }
    removeCards(cards) {
        cards.forEach((card) => {
            const position = this.indexOfCard(card);
            if (position > -1) {
                this.getCards().splice(position, 1);
            }
            else {
                throw new Error('Card does not exist in collection');
            }
        });
        return this;
    }
    takeCard() {
        if (!this.isEmpty()) {
            return this.getCards().shift();
        }
        throw new Error('No cards remaining in pile');
    }
    /**
     * Remove cards from hand.
     * @param amount Amount of cards to remove from Hand. If less than 1, all cards are taken.
     */
    takeCards(amount) {
        if (!amount || amount < 1) {
            amount = this.getCount();
        }
        // tslint:disable-next-line:prefer-const
        let pulledCards = [];
        while (!this.isEmpty() && pulledCards.length < amount) {
            pulledCards.push(this.getCards().shift());
        }
        return pulledCards;
    }
    getCards() {
        return this.cards;
    }
    setCards(cards) {
        this.cards = cards;
        return this;
    }
    hasCard(card) {
        return this.getCards().some((c) => c.getIndex() === card.getIndex());
    }
    hasCards(cards) {
        if (!this.hasCard(cards.shift())) {
            return false;
        }
        if (cards && cards.length > 0) {
            return this.hasCards(cards);
        }
        else {
            return true;
        }
    }
    getCount() {
        return this.getCards().length;
    }
    isEmpty() {
        return this.getCount() === 0;
    }
    shuffle() {
        this.setCards(this.shuffleService.shuffle(this.getCards()));
    }
    indexOfCard(card) {
        for (let i = 0; i < this.getCount(); i++) {
            const loopCard = this.getCards()[i];
            if (this.objectComparer.areEquivalent(card, loopCard)) {
                return i;
            }
        }
        return -1;
    }
    cardAtIndex(index) {
        if (index >= 0 && index <= (this.getCount() - 1)) {
            return this.getCards()[index];
        }
        else {
            throw new Error('Card collection does not contain card at index');
        }
    }
}
exports.CardCollection = CardCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZENvbGxlY3Rpb24ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NhcmRDb2xsZWN0aW9uL2NhcmRDb2xsZWN0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0VBQTJFO0FBSTNFLGtGQUF5RTtBQUV6RTs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxjQUFjO0lBVXpCLFlBQXFCLFFBQWlCLEVBQUU7UUFBbkIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQVR4Qzs7OztXQUlHO1FBQ0ksU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNqQixtQkFBYyxHQUFvQixJQUFJLDJDQUF5QixFQUFFLENBQUM7UUFDbEUsbUJBQWMsR0FBb0IsSUFBSSwyQ0FBaUIsRUFBRSxDQUFDO0lBSWxFLENBQUM7SUFFTSxPQUFPLENBQUUsSUFBVztRQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSxRQUFRLENBQUUsS0FBYztRQUM3QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVyxDQUFFLEtBQWM7UUFDaEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JCLE1BQU0sUUFBUSxHQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQzthQUN0RDtRQUNILENBQUMsQ0FBQyxD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