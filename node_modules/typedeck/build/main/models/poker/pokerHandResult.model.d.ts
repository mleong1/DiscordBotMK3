import { PokerHandType } from './pokerHandType.model';
import { PlayingCard } from '../card/playingCard.model';
import { IRankSet } from '../card/rankSet.interface';
import { AceHighRankSet } from '../card/aceHighRankSet.model';
import { CardName } from '../card/cardName.model';
export declare class PokerHandResult {
    /**
     * Type of hand created with
     * `cardsUsed`.
     */
    handType: PokerHandType | undefined;
    /**
     * Comparable value of current hand
     * to rank above or below another
     * `PokerHandResult`.
     */
    value: number;
    /**
     * All cards used to determine
     * result.
     */
    cards: PlayingCard[];
    /**
     * Cards in result.
     */
    cardsUsed: PlayingCard[];
    /**
     * RankSet used to help determine highest ranked kickers
     * not used in hand score
     */
    rankSet: IRankSet;
    /**
     * Cards that were used when scoring the hand
     * but had no impact on the score itself. Used to
     * help determine a winner in event of a tied score value.
     */
    readonly kickers: PlayingCard[];
    /**
     * Unique list of `CardName` objects that had a play
     * in `PokerHandResult.value`.
     *
     * If you want every card that played a part
     * in the value, see the `PokerHandResult.cardsUsed` property.
     */
    readonly scoringHandCardNames: CardName[];
    constructor(cards?: PlayingCard[], value?: number, cardsUsed?: PlayingCard[], rankSet?: AceHighRankSet);
    setHandType(type: PokerHandType): this;
    toString(): string;
}
