import { IChip } from '../chip/chip.interface';
import { IChipCollection } from './chipCollection.interface';
/**
 * Basic class to represent a grouping of IChips.
 *
 * Supports activities like: getting chips,
 * adding chips, taking specific chip, taking
 * chips by value, getting value of chips.
 */
export declare class ChipCollection implements IChipCollection {
    private chips;
    private objectComparer;
    private chipService;
    constructor(chips?: IChip[]);
    addChip(chip: IChip): this;
    addChips(chips: IChip[]): this;
    getChips(): IChip[];
    setChips(chips: IChip[]): this;
    getChipCount(): number;
    isEmpty(): boolean;
    removeChips(chips: IChip[]): IChipCollection;
    /**
     * Condense chips into fewer but larger denominations.
     * Uses the first chip's class to create new colored chips with.
     */
    colorUp(): IChipCollection;
    /**
     * Returns first identified index position of chip in
     * collection.
     * @param chip Object to search for in collection
     */
    indexOfChip(chip: IChip): number;
    /**
     * Return value of Chips currently in ChipCollection (via `IChipCollection.getChips()`).
     * Optionally, can pass in `IChip[]` to evaluate a manually passed in value.
     * @param chips Optional, value of passed in chips. If no chips passed in,
     * it will evaluate value of current ChipCollection.
     */
    getValue(chips?: IChip[] | undefined): number;
    /**
     * Will pull `IChip`s from `IChipCollection` to satisfy
     * the `amount` requested.
     * @param amount Value to take from IChipCollection
     */
    takeValue(amount: number): IChip[];
}
