import * as tslib_1 from "tslib";
import { test } from 'ava';
import { CardName, Card, IndexedMap } from 'typedeck';
test('add card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardIndexedMap = new IndexedMap();
    const testCard1 = new Card(CardName.Ace);
    cardIndexedMap.add(testCard1, 'testCard1');
    t.deepEqual(cardIndexedMap.entries().size, 1);
}));
test('get card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardIndexedMap = new IndexedMap();
    const testCard1 = new Card(CardName.Ace);
    const testCard2 = new Card(CardName.Joker);
    cardIndexedMap.add(testCard1, 'testCard1');
    cardIndexedMap.add(testCard2, 'testCard2');
    t.deepEqual(cardIndexedMap.get(testCard1), 'testCard1');
    t.deepEqual(cardIndexedMap.get(testCard2), 'testCard2');
}));
test('delete card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardIndexedMap = new IndexedMap();
    const testCard1 = new Card(CardName.Ace);
    cardIndexedMap.add(testCard1, 'testCard1');
    t.deepEqual(cardIndexedMap.entries().size, 1);
    cardIndexedMap.delete(testCard1);
    t.deepEqual(cardIndexedMap.entries().size, 0);
}));
test('clear cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardIndexedMap = new IndexedMap();
    const testCard1 = new Card(CardName.Ace);
    const testCard2 = new Card(CardName.Joker);
    cardIndexedMap.add(testCard1, 'testCard1');
    cardIndexedMap.add(testCard2, 'testCard2');
    t.deepEqual(cardIndexedMap.entries().size, 2);
    cardIndexedMap.clear();
    t.deepEqual(cardIndexedMap.entries().size, 0);
}));
test('contains card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardIndexedMap = new IndexedMap();
    const testCard1 = new Card(CardName.Ace);
    cardIndexedMap.add(testCard1, 'testCard1');
    t.deepEqual(cardIndexedMap.contains(testCard1), true);
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlZE1hcC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9pbmRleGVkTWFwLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDM0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUN6QixNQUFNLGNBQWMsR0FBRyxJQUFJLFVBQVUsRUFBZ0IsQ0FBQztJQUV0RCxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFM0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDekIsTUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLEVBQWdCLENBQUM7SUFFdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMzQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUUzQyxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDNUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLEVBQWdCLENBQUM7SUFFdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRTNDLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU5QyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRWpDLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUksVUFBVSxFQUFnQixDQUFDO0lBRXRELE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDM0MsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFM0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRTlDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUV2QixDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUM5QixNQUFNLGNBQWMsR0FBRyxJQUFJLFVBQVUsRUFBZ0IsQ0FBQztJQUV0RCxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFM0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQSxDQUFDLENBQUMifQ==