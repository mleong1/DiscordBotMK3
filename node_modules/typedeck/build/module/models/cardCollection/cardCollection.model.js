import { DurstenfeldShuffleService } from '../../services/shuffle.service';
import { StringifyComparer } from '../../common/stringifyComparer.model';
/**
 * Basic class to represent a grouping of ICards.
 *
 * Supports activities like: getting list of cards,
 * adding cards to group, taking first card, taking
 * multiple cards, getting count of cards, and shuffling
 * the cards.
 */
export class CardCollection {
    constructor(cards = []) {
        this.cards = cards;
        /**
         * Friendly name of card collection that
         * means something: "Hand", "Discard Pile",
         * "In Play", etc.
         */
        this.name = '';
        this.shuffleService = new DurstenfeldShuffleService();
        this.objectComparer = new StringifyComparer();
    }
    addCard(card) {
        return this.addCards([card]);
    }
    addCards(cards) {
        this.getCards().unshift(...cards);
        return this;
    }
    removeCards(cards) {
        cards.forEach((card) => {
            const position = this.indexOfCard(card);
            if (position > -1) {
                this.getCards().splice(position, 1);
            }
            else {
                throw new Error('Card does not exist in collection');
            }
        });
        return this;
    }
    takeCard() {
        if (!this.isEmpty()) {
            return this.getCards().shift();
        }
        throw new Error('No cards remaining in pile');
    }
    /**
     * Remove cards from hand.
     * @param amount Amount of cards to remove from Hand. If less than 1, all cards are taken.
     */
    takeCards(amount) {
        if (!amount || amount < 1) {
            amount = this.getCount();
        }
        // tslint:disable-next-line:prefer-const
        let pulledCards = [];
        while (!this.isEmpty() && pulledCards.length < amount) {
            pulledCards.push(this.getCards().shift());
        }
        return pulledCards;
    }
    getCards() {
        return this.cards;
    }
    setCards(cards) {
        this.cards = cards;
        return this;
    }
    hasCard(card) {
        return this.getCards().some((c) => c.getIndex() === card.getIndex());
    }
    hasCards(cards) {
        if (!this.hasCard(cards.shift())) {
            return false;
        }
        if (cards && cards.length > 0) {
            return this.hasCards(cards);
        }
        else {
            return true;
        }
    }
    getCount() {
        return this.getCards().length;
    }
    isEmpty() {
        return this.getCount() === 0;
    }
    shuffle() {
        this.setCards(this.shuffleService.shuffle(this.getCards()));
    }
    indexOfCard(card) {
        for (let i = 0; i < this.getCount(); i++) {
            const loopCard = this.getCards()[i];
            if (this.objectComparer.areEquivalent(card, loopCard)) {
                return i;
            }
        }
        return -1;
    }
    cardAtIndex(index) {
        if (index >= 0 && index <= (this.getCount() - 1)) {
            return this.getCards()[index];
        }
        else {
            throw new Error('Card collection does not contain card at index');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZENvbGxlY3Rpb24ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NhcmRDb2xsZWN0aW9uL2NhcmRDb2xsZWN0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSTNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXpFOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLE9BQU8sY0FBYztJQVV6QixZQUFxQixRQUFpQixFQUFFO1FBQW5CLFVBQUssR0FBTCxLQUFLLENBQWM7UUFUeEM7Ozs7V0FJRztRQUNJLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDakIsbUJBQWMsR0FBb0IsSUFBSSx5QkFBeUIsRUFBRSxDQUFDO1FBQ2xFLG1CQUFjLEdBQW9CLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUlsRSxDQUFDO0lBRU0sT0FBTyxDQUFFLElBQVc7UUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sUUFBUSxDQUFFLEtBQWM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFdBQVcsQ0FBRSxLQUFjO1FBQ2hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNyQztpQkFBTTtnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDdEQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBVyxDQUFDO1NBQ3pDO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxTQUFTLENBQUUsTUFBYztRQUM5QixJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjtRQUNELHdDQUF3QztRQUN4QyxJQUFJLFdBQVcsR0FBWSxFQUFFLENBQUM7UUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRTtZQUNyRCxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQVcsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVNLFFBQVEsQ0FBRSxLQUFjO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLE9BQU8sQ0FBRSxJQUFXO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFTSxRQUFRLENBQUUsS0FBYztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFXLENBQUMsRUFBRTtZQUN6QyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLFdBQVcsQ0FBRSxJQUFXO1FBQzdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUNyRCxPQUFPLENBQUMsQ0FBQzthQUNWO1NBQ0Y7UUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVNLFdBQVcsQ0FBRSxLQUFhO1FBQy9CLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtJQUNILENBQUM7Q0FDRiJ9