"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pokerHandResult_model_1 = require("../models/poker/pokerHandResult.model");
const indexedMap_model_1 = require("../common/indexedMap.model");
const pokerHandType_model_1 = require("../models/poker/pokerHandType.model");
const pokerScoring_error_1 = require("../errors/pokerScoring.error");
const texasHoldEmGameType_model_1 = require("../models/gameType/texasHoldEmGameType.model");
const cardName_model_1 = require("../models/card/cardName.model");
const iterableExtensions_model_1 = require("../common/iterableExtensions.model");
class PokerScoreService {
    constructor() {
        this.gameType = new texasHoldEmGameType_model_1.TexasHoldEmPokerGameType();
    }
    scoreHand(hand, communityCards = []) {
        const playerHand = [...hand.getCards().concat(communityCards)];
        if (playerHand.length < 5) {
            throw new pokerScoring_error_1.PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        return this.scoreCards(playerHand);
    }
    scoreCards(cards, communityCards = []) {
        let bestHand = new pokerHandResult_model_1.PokerHandResult();
        const playerCards = [...cards.concat(communityCards)];
        if (playerCards.length < 5) {
            throw new pokerScoring_error_1.PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        // find best hand
        for (const combination of iterableExtensions_model_1.IterableExtensions.Combinations(cards, 5)) {
            const result = this.calculate(combination);
            if (result.value > bestHand.value) {
                bestHand = result;
            }
        }
        return bestHand;
    }
    scorePlayers(players, communityCards = []) {
        const result = new indexedMap_model_1.IndexedMap();
        players.forEach((player) => {
            const playerHand = [...player.getHand().getCards().concat(communityCards)];
            if (playerHand.length < 5) {
                throw new pokerScoring_error_1.PokerScoringError(`Invalid cards provided for ${player}. Please send at least 5 cards.`);
            }
            const playerScore = this.scoreCards(playerHand);
            result.add(player, playerScore);
        });
        return result;
    }
    getScoreRank(result) {
        if (result.cards.length < 5) {
            throw new pokerScoring_error_1.PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        result.value = this.value(this.ranked(result.cards), result.handType);
        return result.value;
    }
    ranked(cards) {
        // split cards by rank
        let result = [];
        for (let card of cards) {
            let r = this.gameType.rankSet.getRankValue(card);
            result[r] = result[r] || [];
            result[r].push(card);
        }
        // condense
        result = result.filter((rank) => !!rank);
        // high to low
        result.reverse();
        // pairs and sets first
        result.sort((a, b) => {
            return a.length > b.length ? -1 : a.length < b.length ? 1 : 0;
        });
        return result;
    }
    isStraight(ranked) {
        // must have 5 different cards
        if (!ranked[4]) {
            return false;
        }
        // could be wheel if r1 is 'ace' and r4 is '2'
        if (ranked[0][0].cardName === cardName_model_1.CardName.Ace &&
            ranked[1][0].cardName === cardName_model_1.CardName.Five &&
            ranked[4][0].cardName === cardName_model_1.CardName.Two) {
            // hand is 'ace' '5' '4' '3' '2'
            ranked.push(ranked.shift());
            // ace is now low
            return true;
        }
        // run of five in row is straight
        let r1 = this.gameType.rankSet.getRankValue(ranked[0][0]);
        let r4 = this.gameType.rankSet.getRankValue(ranked[4][0]);
        return (r1 - r4) === 4;
    }
    isFlush(cards) {
        // all suits match is flush
        return cards.every((card) => card.suit === cards[0].suit);
    }
    value(ranked, handType) {
        // primary wins the rest are kickers
        let str = '';
        for (let rank of ranked) {
            // create two digit value
            let r = this.gameType.rankSet.getRankValue(rank[0]);
            let v = (r < 10 ? '0' : '') + r;
            for (let i = 0; i < rank.length; i++) {
                // append value for each card
                str += v;
            }
        }
        // to integer
        return (handType * 10000000000) + parseInt(str, 10);
    }
    calculate(cards) {
        let result;
        let cardsUsed = [];
        let handType;
        const ranked = this.ranked(cards);
        const isFlush = this.isFlush(cards);
        const isStraight = this.isStraight(ranked);
        const highestPlayedCards = ranked[0];
        const rankSet = this.gameType.rankSet;
        if (isStraight && isFlush && highestPlayedCards[0].cardName === cardName_model_1.CardName.Ace) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = pokerHandType_model_1.PokerHandType.RoyalFlush;
        }
        else if (isStraight && isFlush) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = pokerHandType_model_1.PokerHandType.StraightFlush;
        }
        else if (highestPlayedCards.length === 4) {
            cardsUsed = ranked[0];
            handType = pokerHandType_model_1.PokerHandType.FourOfAKind;
        }
        else if (ranked[0].length === 3 && ranked[1].length === 2) {
            cardsUsed = ranked[0].concat(ranked[1]);
            handType = pokerHandType_model_1.PokerHandType.FullHouse;
        }
        else if (isFlush) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = pokerHandType_model_1.PokerHandType.Flush;
        }
        else if (isStraight) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = pokerHandType_model_1.PokerHandType.Straight;
        }
        else if (highestPlayedCards.length === 3) {
            cardsUsed = ranked[0];
            handType = pokerHandType_model_1.PokerHandType.ThreeOfAKind;
        }
        else if (ranked[0].length === 2 && ranked[1].length === 2) {
            cardsUsed = ranked[0].concat(ranked[1]);
            handType = pokerHandType_model_1.PokerHandType.TwoPair;
        }
        else if (highestPlayedCards.length === 2) {
            cardsUsed = ranked[0];
            handType = pokerHandType_model_1.PokerHandType.OnePair;
        }
        else {
            cardsUsed = ranked[0];
            handType = pokerHandType_model_1.PokerHandType.HighCard;
        }
        result = new pokerHandResult_model_1.PokerHandResult(cards, this.value(ranked, handType), cardsUsed, rankSet)
            .setHandType(handType);
        return result;
    }
}
exports.PokerScoreService = PokerScoreService;
//# sourceMappingURL=data:application/json;base64,