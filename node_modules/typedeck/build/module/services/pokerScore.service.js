import { PokerHandResult } from '../models/poker/pokerHandResult.model';
import { IndexedMap } from '../common/indexedMap.model';
import { PokerHandType } from '../models/poker/pokerHandType.model';
import { PokerScoringError } from '../errors/pokerScoring.error';
import { TexasHoldEmPokerGameType } from '../models/gameType/texasHoldEmGameType.model';
import { CardName } from '../models/card/cardName.model';
import { IterableExtensions } from '../common/iterableExtensions.model';
export class PokerScoreService {
    constructor() {
        this.gameType = new TexasHoldEmPokerGameType();
    }
    scoreHand(hand, communityCards = []) {
        const playerHand = [...hand.getCards().concat(communityCards)];
        if (playerHand.length < 5) {
            throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        return this.scoreCards(playerHand);
    }
    scoreCards(cards, communityCards = []) {
        let bestHand = new PokerHandResult();
        const playerCards = [...cards.concat(communityCards)];
        if (playerCards.length < 5) {
            throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        // find best hand
        for (const combination of IterableExtensions.Combinations(cards, 5)) {
            const result = this.calculate(combination);
            if (result.value > bestHand.value) {
                bestHand = result;
            }
        }
        return bestHand;
    }
    scorePlayers(players, communityCards = []) {
        const result = new IndexedMap();
        players.forEach((player) => {
            const playerHand = [...player.getHand().getCards().concat(communityCards)];
            if (playerHand.length < 5) {
                throw new PokerScoringError(`Invalid cards provided for ${player}. Please send at least 5 cards.`);
            }
            const playerScore = this.scoreCards(playerHand);
            result.add(player, playerScore);
        });
        return result;
    }
    getScoreRank(result) {
        if (result.cards.length < 5) {
            throw new PokerScoringError('Invalid cards provided. Please send at least 5 cards.');
        }
        result.value = this.value(this.ranked(result.cards), result.handType);
        return result.value;
    }
    ranked(cards) {
        // split cards by rank
        let result = [];
        for (let card of cards) {
            let r = this.gameType.rankSet.getRankValue(card);
            result[r] = result[r] || [];
            result[r].push(card);
        }
        // condense
        result = result.filter((rank) => !!rank);
        // high to low
        result.reverse();
        // pairs and sets first
        result.sort((a, b) => {
            return a.length > b.length ? -1 : a.length < b.length ? 1 : 0;
        });
        return result;
    }
    isStraight(ranked) {
        // must have 5 different cards
        if (!ranked[4]) {
            return false;
        }
        // could be wheel if r1 is 'ace' and r4 is '2'
        if (ranked[0][0].cardName === CardName.Ace &&
            ranked[1][0].cardName === CardName.Five &&
            ranked[4][0].cardName === CardName.Two) {
            // hand is 'ace' '5' '4' '3' '2'
            ranked.push(ranked.shift());
            // ace is now low
            return true;
        }
        // run of five in row is straight
        let r1 = this.gameType.rankSet.getRankValue(ranked[0][0]);
        let r4 = this.gameType.rankSet.getRankValue(ranked[4][0]);
        return (r1 - r4) === 4;
    }
    isFlush(cards) {
        // all suits match is flush
        return cards.every((card) => card.suit === cards[0].suit);
    }
    value(ranked, handType) {
        // primary wins the rest are kickers
        let str = '';
        for (let rank of ranked) {
            // create two digit value
            let r = this.gameType.rankSet.getRankValue(rank[0]);
            let v = (r < 10 ? '0' : '') + r;
            for (let i = 0; i < rank.length; i++) {
                // append value for each card
                str += v;
            }
        }
        // to integer
        return (handType * 10000000000) + parseInt(str, 10);
    }
    calculate(cards) {
        let result;
        let cardsUsed = [];
        let handType;
        const ranked = this.ranked(cards);
        const isFlush = this.isFlush(cards);
        const isStraight = this.isStraight(ranked);
        const highestPlayedCards = ranked[0];
        const rankSet = this.gameType.rankSet;
        if (isStraight && isFlush && highestPlayedCards[0].cardName === CardName.Ace) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = PokerHandType.RoyalFlush;
        }
        else if (isStraight && isFlush) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = PokerHandType.StraightFlush;
        }
        else if (highestPlayedCards.length === 4) {
            cardsUsed = ranked[0];
            handType = PokerHandType.FourOfAKind;
        }
        else if (ranked[0].length === 3 && ranked[1].length === 2) {
            cardsUsed = ranked[0].concat(ranked[1]);
            handType = PokerHandType.FullHouse;
        }
        else if (isFlush) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = PokerHandType.Flush;
        }
        else if (isStraight) {
            cardsUsed = [ranked[0][0], ranked[1][0], ranked[2][0], ranked[3][0], ranked[4][0]];
            handType = PokerHandType.Straight;
        }
        else if (highestPlayedCards.length === 3) {
            cardsUsed = ranked[0];
            handType = PokerHandType.ThreeOfAKind;
        }
        else if (ranked[0].length === 2 && ranked[1].length === 2) {
            cardsUsed = ranked[0].concat(ranked[1]);
            handType = PokerHandType.TwoPair;
        }
        else if (highestPlayedCards.length === 2) {
            cardsUsed = ranked[0];
            handType = PokerHandType.OnePair;
        }
        else {
            cardsUsed = ranked[0];
            handType = PokerHandType.HighCard;
        }
        result = new PokerHandResult(cards, this.value(ranked, handType), cardsUsed, rankSet)
            .setHandType(handType);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9rZXJTY29yZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3Bva2VyU2NvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFHeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFeEUsTUFBTSxPQUFPLGlCQUFpQjtJQUE5QjtRQUVVLGFBQVEsR0FBRyxJQUFJLHdCQUF3QixFQUFFLENBQUM7SUFrS3BELENBQUM7SUFoS1EsU0FBUyxDQUFFLElBQVcsRUFBRSxpQkFBZ0MsRUFBRTtRQUMvRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsTUFBTSxJQUFJLGlCQUFpQixDQUFDLHVEQUF1RCxDQUFDLENBQUM7U0FDdEY7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBMkIsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxVQUFVLENBQUUsS0FBb0IsRUFBRSxpQkFBZ0MsRUFBRTtRQUN6RSxJQUFJLFFBQVEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksaUJBQWlCLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUN0RjtRQUNELGlCQUFpQjtRQUNqQixLQUFLLE1BQU0sV0FBVyxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFDakMsUUFBUSxHQUFHLE1BQU0sQ0FBQzthQUNuQjtTQUNGO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVNLFlBQVksQ0FBRSxPQUFrQixFQUFFLGlCQUFnQyxFQUFFO1FBQ3pFLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUE0QixDQUFDO1FBQzFELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QixNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBa0IsQ0FBQztZQUM1RixJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLElBQUksaUJBQWlCLENBQUMsOEJBQThCLE1BQU0saUNBQWlDLENBQUMsQ0FBQzthQUNwRztZQUNELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sWUFBWSxDQUFFLE1BQXVCO1FBQzFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFrQixDQUFDLENBQUM7UUFDaEYsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTyxNQUFNLENBQUUsS0FBb0I7UUFDbEMsc0JBQXNCO1FBQ3RCLElBQUksTUFBTSxHQUFvQixFQUFFLENBQUM7UUFFakMsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEI7UUFFRCxXQUFXO1FBQ1gsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6QyxjQUFjO1FBQ2QsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWpCLHVCQUF1QjtRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxVQUFVLENBQUUsTUFBdUI7UUFDekMsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsOENBQThDO1FBQzlDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsR0FBRztZQUN4QyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxJQUFJO1lBQ3ZDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUN4QyxnQ0FBZ0M7WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFtQixDQUFDLENBQUM7WUFDN0MsaUJBQWlCO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxpQ0FBaUM7UUFDakMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU8sT0FBTyxDQUFFLEtBQW9CO1FBQ25DLDJCQUEyQjtRQUMzQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU8sS0FBSyxDQUFFLE1BQXVCLEVBQUUsUUFBdUI7UUFDN0Qsb0NBQW9DO1FBQ3BDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUViLEtBQUssSUFBSSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ3ZCLHlCQUF5QjtZQUN6QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDcEMsNkJBQTZCO2dCQUM3QixHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ1Y7U0FDRjtRQUVELGFBQWE7UUFDYixPQUFPLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLFNBQVMsQ0FBRSxLQUFvQjtRQUNyQyxJQUFJLE1BQXVCLENBQUM7UUFDNUIsSUFBSSxTQUFTLEdBQWtCLEVBQUUsQ0FBQztRQUNsQyxJQUFJLFFBQXVCLENBQUM7UUFFNUIsTUFBTSxNQUFNLEdBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBRXRDLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUM1RSxTQUFTLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkYsUUFBUSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUM7U0FDckM7YUFBTSxJQUFJLFVBQVUsSUFBSSxPQUFPLEVBQUU7WUFDaEMsU0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLFFBQVEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDO1NBQ3hDO2FBQU0sSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7U0FDdEM7YUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzNELFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFFBQVEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3BDO2FBQU0sSUFBSSxPQUFPLEVBQUU7WUFDbEIsU0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLFFBQVEsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO1NBQ2hDO2FBQU0sSUFBSSxVQUFVLEVBQUU7WUFDckIsU0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO1NBQ25DO2FBQU0sSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7U0FDdkM7YUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzNELFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFFBQVEsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7U0FDbEM7YUFBTTtZQUNMLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDbkM7UUFDRCxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUM7YUFDbEYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiJ9