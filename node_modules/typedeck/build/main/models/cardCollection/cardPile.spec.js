"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('empty without cards in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyCards = [];
    const pile = new typedeck_1.CardPile();
    t.deepEqual(pile.getCards(), emptyCards);
}));
ava_1.test('is empty with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const pile = new typedeck_1.CardPile();
    t.true(pile.isEmpty(), 'isEmpty() should have been true');
}));
ava_1.test('has cards when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const pile = new typedeck_1.CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    t.deepEqual(pile.getCards()[0], cards[0], 'Cards were not equivalent or added in same order');
    t.deepEqual(pile.getCards()[1], cards[1], 'Cards were not equivalent or added in same order');
}));
ava_1.test('adds card to bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const bottomCard = new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Hearts);
    const pile = new typedeck_1.CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    pile.addCardsToBottom([bottomCard]);
    t.deepEqual(pile.getCards()[pile.getCount() - 1], bottomCard);
}));
ava_1.test('take card from bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs) // bottom card
    ];
    const bottomCard = new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs);
    const pile = new typedeck_1.CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    t.deepEqual(pile.takeCardFromBottom(), bottomCard);
}));
ava_1.test('take multiple cards from bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs) // bottom card
    ];
    const topCard = new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds);
    const bottomCard = new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs);
    const pile = new typedeck_1.CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    const pulledCards = pile.takeCardsFromBottom(2);
    t.deepEqual(pulledCards[0], bottomCard);
    t.deepEqual(pulledCards[1], topCard);
}));
ava_1.test('take card from bottom if no cards should error', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs) // bottom card
    ];
    const pile = new typedeck_1.CardPile(cards);
    pile.takeCardFromBottom();
    pile.takeCardFromBottom();
    try {
        pile.takeCardFromBottom();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'No cards remaining in pile');
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZFBpbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2FyZENvbGxlY3Rpb24vY2FyZFBpbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMkI7QUFDM0IsdUNBQXdFO0FBRXhFLFVBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ25ELE1BQU0sVUFBVSxHQUFZLEVBQUUsQ0FBQztJQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLG1CQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDdkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUM1RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLHNDQUFzQyxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDckQsTUFBTSxLQUFLLEdBQVk7UUFDckIsSUFBSSxzQkFBVyxDQUFDLG1CQUFRLENBQUMsS0FBSyxFQUFFLGVBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUMsSUFBSSxzQkFBVyxDQUFDLG1CQUFRLENBQUMsR0FBRyxFQUFFLGVBQUksQ0FBQyxLQUFLLENBQUM7S0FDMUMsQ0FBQztJQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksbUJBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNyQyxD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