import { IChipService } from './chipService.interface';
import { IChip } from '../models/chip/chip.interface';
import { IChipCollection } from '../models/chipCollection/chipCollection.interface';
import { Chip } from '../models/chip/chip.model';
export declare class ChipService implements IChipService {
    /**
     * The service should accept an `IChipCollection` and
     * a requested specific amount of chip value, and be able to
     * "break" or "make change" to swap out chips to meet that
     * exact need. These chips are removed from the incoming
     * `chipCollection` and the return value are chips that
     * match the `needValue` requested.
     * @param chipCollection Chips to create `needValue` from
     * @param needValue Amount requested from chips
     * @param chipType Class of Chip to return
     */
    makeChange(chipCollection: IChipCollection, needValue: number, chipType?: typeof Chip, colorUp?: boolean): IChip[];
    sortByValue(chips: IChip[]): IChip[];
    createChips(amount: number, canBeSingleChip?: boolean, chipType?: typeof Chip): IChip[];
    valueOfChips(chips: IChip[]): number;
    colorUp(chips: IChip[], chipType?: typeof Chip): IChip[];
    hasCombinationOfAmount(amount: number, chips: IChip[]): IChip[];
    removeChipsFromStack(chips: IChip[], removeChips: IChip[]): IChip[];
    private getNextChipToBreak;
}
