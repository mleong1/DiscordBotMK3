import { ChipColor } from '../models/chip/chipColor.model';
import { StandardChip } from '../models/chip/standardChip.model';
import { IterableExtensions } from '../common/iterableExtensions.model';
export class ChipService {
    /**
     * The service should accept an `IChipCollection` and
     * a requested specific amount of chip value, and be able to
     * "break" or "make change" to swap out chips to meet that
     * exact need. These chips are removed from the incoming
     * `chipCollection` and the return value are chips that
     * match the `needValue` requested.
     * @param chipCollection Chips to create `needValue` from
     * @param needValue Amount requested from chips
     * @param chipType Class of Chip to return
     */
    makeChange(chipCollection, needValue, chipType = StandardChip, colorUp = false) {
        const currentValue = chipCollection.getValue();
        if (needValue > currentValue) {
            throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${needValue}`);
        }
        else if (needValue <= 0) {
            throw new Error(`makeChange requires a positive Chip amount needed`);
        }
        if (colorUp && chipCollection.getChipCount() > 1) {
            const coloredUp = this.sortByValue(this.colorUp(chipCollection.getChips(), chipType));
            chipCollection.setChips(coloredUp);
        }
        // set aside high chips
        let chips = this.sortByValue(chipCollection.getChips());
        let highChips = [];
        if (chipCollection.getChipCount() > 1) {
            let n = chipCollection.getChipCount() - 1;
            while (n > 0) {
                if (this.valueOfChips(chips.slice(0, n)) > needValue) {
                    highChips.push(...chips.splice(n, 1));
                }
                else {
                    break;
                }
                n--;
            }
        }
        let matchedCombination = this.hasCombinationOfAmount(needValue, chips);
        if (matchedCombination.length > 0) {
            chipCollection.removeChips(matchedCombination);
            return [...matchedCombination];
        }
        const breakChip = this.getNextChipToBreak(chips, needValue);
        chipCollection.removeChips([breakChip]);
        const newChips = this.createChips(breakChip.getValue(), false, chipType);
        chipCollection.addChips([...newChips]);
        return this.makeChange(chipCollection, needValue, chipType, false);
    }
    sortByValue(chips) {
        return Array.from(chips)
            .sort((a, b) => a.getValue() - b.getValue());
    }
    createChips(amount, canBeSingleChip = true, chipType = StandardChip) {
        if (amount <= 0) {
            return [];
        }
        let sampleChip = new chipType(ChipColor.White);
        let sortedChips = Array.from(sampleChip.valueMap.entries())
            .sort((a, b) => {
            return a[1] - b[1];
        });
        const chipsThatCanFulfillValue = sortedChips
            .filter((combo) => combo[1] <= amount).length;
        if (chipsThatCanFulfillValue === 1) {
            canBeSingleChip = true;
        }
        let availableChips = sortedChips
            .filter((combo) => canBeSingleChip ? combo[1] <= amount
            : combo[1] < amount)
            .map((entry) => new chipType(entry[0]));
        if (availableChips.length < 1) {
            throw new Error(`Incompatible Chip class to fulfill a value of '${amount}'`);
        }
        let index = availableChips.length - 1;
        const createdChips = [];
        while (amount >= availableChips[0].getValue()) {
            if (amount >= availableChips[index].getValue()) {
                amount -= availableChips[index].getValue();
                createdChips.push(availableChips[index]);
            }
            else {
                index--;
            }
        }
        return createdChips;
    }
    valueOfChips(chips) {
        if (chips.length === 0) {
            return 0;
        }
        return chips.reduce((a, b) => a + b.getValue(), 0);
    }
    colorUp(chips, chipType = StandardChip) {
        const chipsValue = this.valueOfChips(chips);
        const canBeSingleChip = true;
        return this.createChips(chipsValue, canBeSingleChip, chipType);
    }
    hasCombinationOfAmount(amount, chips) {
        const iteratedChips = this.sortByValue(chips);
        let size = chips.length;
        let foundCombination = [];
        while (size > 0) {
            for (let combination of IterableExtensions.Combinations(iteratedChips, size)) {
                if (this.valueOfChips([...combination]) === amount) {
                    foundCombination = [...combination];
                    break; // close iterator
                }
            }
            if (foundCombination.length > 0) {
                return foundCombination;
            }
            size--;
        }
        return [];
    }
    removeChipsFromStack(chips, removeChips) {
        removeChips.forEach((chip) => {
            for (let i = 0; i < chips.length; i++) {
                if (chips[i].getIndex() === chip.getIndex()) {
                    chips.splice(i, 1);
                    break;
                }
            }
        });
        return chips;
    }
    getNextChipToBreak(chips, needValue) {
        const orderedChips = this.sortByValue(chips);
        const reverseOrderedChips = [...orderedChips].reverse();
        const pulledChips = [];
        // find first largest chip at or under value
        let i = 0;
        let runningTotal = 0;
        while (i < reverseOrderedChips.length - 1) {
            const currentChip = reverseOrderedChips[i];
            const addedChipValue = runningTotal + currentChip.getValue();
            if (addedChipValue <= needValue) {
                runningTotal = addedChipValue;
                pulledChips.push(currentChip);
            }
            i++;
        }
        if (runningTotal > 0) {
            let remainingChips = this.removeChipsFromStack([...orderedChips], pulledChips);
            i = 0;
            while (i < remainingChips.length - 1) {
                const currentChip = remainingChips[i];
                const addedChipValue = runningTotal + currentChip.getValue();
                if (addedChipValue <= needValue) {
                    runningTotal = addedChipValue;
                }
                else {
                    // we found our breakchip at remainingChips[i]
                    break;
                }
                i++;
            }
            return remainingChips[i];
        }
        else {
            return reverseOrderedChips[i];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2NoaXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXhFLE1BQU0sT0FBTyxXQUFXO0lBQ3RCOzs7Ozs7Ozs7O09BVUc7SUFDSSxVQUFVLENBQ2IsY0FBK0IsRUFDL0IsU0FBaUIsRUFDakIsV0FBd0IsWUFBWSxFQUNwQyxVQUFtQixLQUFLO1FBQzFCLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQyxJQUFJLFNBQVMsR0FBRyxZQUFZLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsWUFBWSxpQ0FBaUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUNoRzthQUFNLElBQUksU0FBUyxJQUFJLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDdEU7UUFFRCxJQUFJLE9BQU8sSUFBSSxjQUFjLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ2hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0RixjQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsdUJBQXVCO1FBQ3ZCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxTQUFT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