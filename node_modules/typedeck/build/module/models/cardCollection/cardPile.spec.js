import * as tslib_1 from "tslib";
import { test } from 'ava';
import { CardPile, CardName, Suit, PlayingCard } from 'typedeck';
test('empty without cards in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyCards = [];
    const pile = new CardPile();
    t.deepEqual(pile.getCards(), emptyCards);
}));
test('is empty with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const pile = new CardPile();
    t.true(pile.isEmpty(), 'isEmpty() should have been true');
}));
test('has cards when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new PlayingCard(CardName.Eight, Suit.Diamonds),
        new PlayingCard(CardName.Two, Suit.Clubs)
    ];
    const pile = new CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    t.deepEqual(pile.getCards()[0], cards[0], 'Cards were not equivalent or added in same order');
    t.deepEqual(pile.getCards()[1], cards[1], 'Cards were not equivalent or added in same order');
}));
test('adds card to bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new PlayingCard(CardName.Eight, Suit.Diamonds),
        new PlayingCard(CardName.Two, Suit.Clubs)
    ];
    const bottomCard = new PlayingCard(CardName.Queen, Suit.Hearts);
    const pile = new CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    pile.addCardsToBottom([bottomCard]);
    t.deepEqual(pile.getCards()[pile.getCount() - 1], bottomCard);
}));
test('take card from bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new PlayingCard(CardName.Eight, Suit.Diamonds),
        new PlayingCard(CardName.Two, Suit.Clubs) // bottom card
    ];
    const bottomCard = new PlayingCard(CardName.Two, Suit.Clubs);
    const pile = new CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    t.deepEqual(pile.takeCardFromBottom(), bottomCard);
}));
test('take multiple cards from bottom', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new PlayingCard(CardName.Eight, Suit.Diamonds),
        new PlayingCard(CardName.Two, Suit.Clubs) // bottom card
    ];
    const topCard = new PlayingCard(CardName.Eight, Suit.Diamonds);
    const bottomCard = new PlayingCard(CardName.Two, Suit.Clubs);
    const pile = new CardPile(cards);
    t.false(pile.isEmpty(), 'was empty');
    const pulledCards = pile.takeCardsFromBottom(2);
    t.deepEqual(pulledCards[0], bottomCard);
    t.deepEqual(pulledCards[1], topCard);
}));
test('take card from bottom if no cards should error', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new PlayingCard(CardName.Eight, Suit.Diamonds),
        new PlayingCard(CardName.Two, Suit.Clubs) // bottom card
    ];
    const pile = new CardPile(cards);
    pile.takeCardFromBottom();
    pile.takeCardFromBottom();
    try {
        pile.takeCardFromBottom();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'No cards remaining in pile');
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZFBpbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2FyZENvbGxlY3Rpb24vY2FyZFBpbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQztBQUMzQixPQUFPLEVBQVMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhFLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ25ELE1BQU0sVUFBVSxHQUFZLEVBQUUsQ0FBQztJQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUN2QyxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLGlDQUFpQyxDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ3JELE1BQU0sS0FBSyxHQUFZO1FBQ3JCLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDMUMsQ0FBQztJQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxD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