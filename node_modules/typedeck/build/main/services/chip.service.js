"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chipColor_model_1 = require("../models/chip/chipColor.model");
const standardChip_model_1 = require("../models/chip/standardChip.model");
const iterableExtensions_model_1 = require("../common/iterableExtensions.model");
class ChipService {
    /**
     * The service should accept an `IChipCollection` and
     * a requested specific amount of chip value, and be able to
     * "break" or "make change" to swap out chips to meet that
     * exact need. These chips are removed from the incoming
     * `chipCollection` and the return value are chips that
     * match the `needValue` requested.
     * @param chipCollection Chips to create `needValue` from
     * @param needValue Amount requested from chips
     * @param chipType Class of Chip to return
     */
    makeChange(chipCollection, needValue, chipType = standardChip_model_1.StandardChip, colorUp = false) {
        const currentValue = chipCollection.getValue();
        if (needValue > currentValue) {
            throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${needValue}`);
        }
        else if (needValue <= 0) {
            throw new Error(`makeChange requires a positive Chip amount needed`);
        }
        if (colorUp && chipCollection.getChipCount() > 1) {
            const coloredUp = this.sortByValue(this.colorUp(chipCollection.getChips(), chipType));
            chipCollection.setChips(coloredUp);
        }
        // set aside high chips
        let chips = this.sortByValue(chipCollection.getChips());
        let highChips = [];
        if (chipCollection.getChipCount() > 1) {
            let n = chipCollection.getChipCount() - 1;
            while (n > 0) {
                if (this.valueOfChips(chips.slice(0, n)) > needValue) {
                    highChips.push(...chips.splice(n, 1));
                }
                else {
                    break;
                }
                n--;
            }
        }
        let matchedCombination = this.hasCombinationOfAmount(needValue, chips);
        if (matchedCombination.length > 0) {
            chipCollection.removeChips(matchedCombination);
            return [...matchedCombination];
        }
        const breakChip = this.getNextChipToBreak(chips, needValue);
        chipCollection.removeChips([breakChip]);
        const newChips = this.createChips(breakChip.getValue(), false, chipType);
        chipCollection.addChips([...newChips]);
        return this.makeChange(chipCollection, needValue, chipType, false);
    }
    sortByValue(chips) {
        return Array.from(chips)
            .sort((a, b) => a.getValue() - b.getValue());
    }
    createChips(amount, canBeSingleChip = true, chipType = standardChip_model_1.StandardChip) {
        if (amount <= 0) {
            return [];
        }
        let sampleChip = new chipType(chipColor_model_1.ChipColor.White);
        let sortedChips = Array.from(sampleChip.valueMap.entries())
            .sort((a, b) => {
            return a[1] - b[1];
        });
        const chipsThatCanFulfillValue = sortedChips
            .filter((combo) => combo[1] <= amount).length;
        if (chipsThatCanFulfillValue === 1) {
            canBeSingleChip = true;
        }
        let availableChips = sortedChips
            .filter((combo) => canBeSingleChip ? combo[1] <= amount
            : combo[1] < amount)
            .map((entry) => new chipType(entry[0]));
        if (availableChips.length < 1) {
            throw new Error(`Incompatible Chip class to fulfill a value of '${amount}'`);
        }
        let index = availableChips.length - 1;
        const createdChips = [];
        while (amount >= availableChips[0].getValue()) {
            if (amount >= availableChips[index].getValue()) {
                amount -= availableChips[index].getValue();
                createdChips.push(availableChips[index]);
            }
            else {
                index--;
            }
        }
        return createdChips;
    }
    valueOfChips(chips) {
        if (chips.length === 0) {
            return 0;
        }
        return chips.reduce((a, b) => a + b.getValue(), 0);
    }
    colorUp(chips, chipType = standardChip_model_1.StandardChip) {
        const chipsValue = this.valueOfChips(chips);
        const canBeSingleChip = true;
        return this.createChips(chipsValue, canBeSingleChip, chipType);
    }
    hasCombinationOfAmount(amount, chips) {
        const iteratedChips = this.sortByValue(chips);
        let size = chips.length;
        let foundCombination = [];
        while (size > 0) {
            for (let combination of iterableExtensions_model_1.IterableExtensions.Combinations(iteratedChips, size)) {
                if (this.valueOfChips([...combination]) === amount) {
                    foundCombination = [...combination];
                    break; // close iterator
                }
            }
            if (foundCombination.length > 0) {
                return foundCombination;
            }
            size--;
        }
        return [];
    }
    removeChipsFromStack(chips, removeChips) {
        removeChips.forEach((chip) => {
            for (let i = 0; i < chips.length; i++) {
                if (chips[i].getIndex() === chip.getIndex()) {
                    chips.splice(i, 1);
                    break;
                }
            }
        });
        return chips;
    }
    getNextChipToBreak(chips, needValue) {
        const orderedChips = this.sortByValue(chips);
        const reverseOrderedChips = [...orderedChips].reverse();
        const pulledChips = [];
        // find first largest chip at or under value
        let i = 0;
        let runningTotal = 0;
        while (i < reverseOrderedChips.length - 1) {
            const currentChip = reverseOrderedChips[i];
            const addedChipValue = runningTotal + currentChip.getValue();
            if (addedChipValue <= needValue) {
                runningTotal = addedChipValue;
                pulledChips.push(currentChip);
            }
            i++;
        }
        if (runningTotal > 0) {
            let remainingChips = this.removeChipsFromStack([...orderedChips], pulledChips);
            i = 0;
            while (i < remainingChips.length - 1) {
                const currentChip = remainingChips[i];
                const addedChipValue = runningTotal + currentChip.getValue();
                if (addedChipValue <= needValue) {
                    runningTotal = addedChipValue;
                }
                else {
                    // we found our breakchip at remainingChips[i]
                    break;
                }
                i++;
            }
            return remainingChips[i];
        }
        else {
            return reverseOrderedChips[i];
        }
    }
}
exports.ChipService = ChipService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2NoaXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLG9FQUEyRDtBQUUzRCwwRUFBaUU7QUFDakUsaUZBQXdFO0FBRXhFLE1BQWEsV0FBVztJQUN0Qjs7Ozs7Ozs7OztPQVVHO0lBQ0ksVUFBVSxDQUNiLGNBQStCLEVBQy9CLFNBQWlCLEVBQ2pCLFdBQXdCLGlDQUFZLEVBQ3BDLFVBQW1CLEtBQUs7UUFDMUIsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9DLElBQUksU0FBUyxHQUFHLFlBQVksRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixZQUFZLGlDQUFpQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQ2hHO2FBQU0sSUFBSSxTQUFTLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTtRQUVELElBQUksT0FBTyxJQUFJLGNBQWMsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDaEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RGLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEM7UUFFRCx1QkFBdUI7UUFDdkIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLFNBQVMsR0FBWSxFQUFFLENBQUM7UUFDNUIsSUFBSSxjQUFjLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxZ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