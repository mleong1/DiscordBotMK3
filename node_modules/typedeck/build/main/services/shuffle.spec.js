"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('does shuffle', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.DurstenfeldShuffleService();
    const staticCards = [
        new typedeck_1.Card(typedeck_1.CardName.Ace),
        new typedeck_1.Card(typedeck_1.CardName.Two),
        new typedeck_1.Card(typedeck_1.CardName.Three),
        new typedeck_1.Card(typedeck_1.CardName.Four),
        new typedeck_1.Card(typedeck_1.CardName.Five),
        new typedeck_1.Card(typedeck_1.CardName.Six),
        new typedeck_1.Card(typedeck_1.CardName.Seven),
        new typedeck_1.Card(typedeck_1.CardName.Eight),
        new typedeck_1.Card(typedeck_1.CardName.Nine),
        new typedeck_1.Card(typedeck_1.CardName.Ten),
        new typedeck_1.Card(typedeck_1.CardName.Jack),
        new typedeck_1.Card(typedeck_1.CardName.Queen),
        new typedeck_1.Card(typedeck_1.CardName.King),
        new typedeck_1.Card(typedeck_1.CardName.Joker)
    ];
    const shuffledCards = service.shuffle([...staticCards]);
    let allEquivalent = true;
    for (let i = 0; i < shuffledCards.length; i++) {
        if (staticCards[i].getIndex() !== shuffledCards[i].getIndex()) {
            allEquivalent = false;
            break;
        }
    }
    t.false(allEquivalent);
}));
ava_1.test('will error on less than 2 cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const service = new typedeck_1.DurstenfeldShuffleService();
    const cardsToShuffle = [
        new typedeck_1.Card(typedeck_1.CardName.Ace)
    ];
    try {
        service.shuffle(cardsToShuffle);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Not enough cards to shuffle');
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3NodWZmbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMkI7QUFDM0IsdUNBS2tCO0FBRWxCLFVBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUM3QixNQUFNLE9BQU8sR0FBRyxJQUFJLG9DQUF5QixFQUFFLENBQUM7SUFDaEQsTUFBTSxXQUFXLEdBQVk7UUFDM0IsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxHQUFHLENBQUM7UUFDdEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxlQUFJLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUM7S0FDekIsQ0FBQztJQUNGLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM3RCxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLE1BQU07U0FDUDtLQUNGO0lBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLGlDQUFpQyxFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQ0FBeUIsRUFBRSxDQUFDO0lBQ2hELE1BQU0sY0FBYyxHQUFZO1FBQzlCLElBQUksZUFBSSxDQUFDLG1CQUFRLENBQUMsR0FBRyxDQUFDO0tBQ3ZCLENBQUM7SUFDRixJQUFJO1FBQ0YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDcEM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0tBQ3pEO0FBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQyJ9