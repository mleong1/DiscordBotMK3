import { StringifyComparer } from '../../common/stringifyComparer.model';
import { ChipService } from '../../services/chip.service';
/**
 * Basic class to represent a grouping of IChips.
 *
 * Supports activities like: getting chips,
 * adding chips, taking specific chip, taking
 * chips by value, getting value of chips.
 */
export class ChipCollection {
    constructor(chips = []) {
        this.chips = chips;
        this.objectComparer = new StringifyComparer();
        this.chipService = new ChipService();
    }
    addChip(chip) {
        return this.addChips([chip]);
    }
    addChips(chips) {
        this.getChips().unshift(...chips);
        return this;
    }
    getChips() {
        return this.chips;
    }
    setChips(chips) {
        this.chips = chips;
        return this;
    }
    getChipCount() {
        return this.getChips().length;
    }
    isEmpty() {
        return this.getChipCount() === 0;
    }
    removeChips(chips) {
        if (chips.length === 0) {
            return this;
        }
        this.chipService.removeChipsFromStack(this.getChips(), chips);
        return this;
    }
    /**
     * Condense chips into fewer but larger denominations.
     * Uses the first chip's class to create new colored chips with.
     */
    colorUp() {
        if (this.getChipCount() === 0) {
            return this;
        }
        const newChips = this.chipService.colorUp(this.getChips(), this.getChips()[0].constructor);
        this.setChips(newChips);
        return this;
    }
    /**
     * Returns first identified index position of chip in
     * collection.
     * @param chip Object to search for in collection
     */
    indexOfChip(chip) {
        for (let i = 0; i < this.getChipCount(); i++) {
            const loopCard = this.getChips()[i];
            if (this.objectComparer.areEquivalent(chip, loopCard)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Return value of Chips currently in ChipCollection (via `IChipCollection.getChips()`).
     * Optionally, can pass in `IChip[]` to evaluate a manually passed in value.
     * @param chips Optional, value of passed in chips. If no chips passed in,
     * it will evaluate value of current ChipCollection.
     */
    getValue(chips) {
        if (chips === undefined) {
            chips = this.getChips();
        }
        return this.chipService.valueOfChips(chips);
    }
    /**
     * Will pull `IChip`s from `IChipCollection` to satisfy
     * the `amount` requested.
     * @param amount Value to take from IChipCollection
     */
    takeValue(amount) {
        const currentValue = this.getValue();
        if (amount > currentValue) {
            throw new Error(`Not enough chips (${currentValue}) to satisfy requested amount ${amount}`);
        }
        return this.chipService.makeChange(this, amount, this.getChips()[0].constructor);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcENvbGxlY3Rpb24ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NoaXBDb2xsZWN0aW9uL2NoaXBDb2xsZWN0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUl6QixZQUFxQixRQUFpQixFQUFFO1FBQW5CLFVBQUssR0FBTCxLQUFLLENBQWM7UUFIaEMsbUJBQWMsR0FBb0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQzFELGdCQUFXLEdBQWlCLElBQUksV0FBVyxFQUFFLENBQUM7SUFHdEQsQ0FBQztJQUVNLE9BQU8sQ0FBRSxJQUFXO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFFBQVEsQ0FBRSxLQUFjO1FBQzdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxRQUFRLENBQUUsS0FBYztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxZQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sV0FBVyxDQUFFLEtBQWM7UUFDaEMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTztRQUNaLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFrQixDQUFDLENBQUM7UUFDbEcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksV0FBVyxDQUFFLElBQVc7UUFDN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3JELE9BQU8sQ0FBQyxDQUFDO2FBQ1Y7U0FDRjtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDWixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxRQUFRLENBQUUsS0FBMkI7UUFDMUMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDekI7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksU0FBUyxDQUFFLE1BQWM7UUFDOUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLFlBQVksRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixZQUFZLGlDQUFpQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFrQixDQUFDLENBQUM7SUFDMUYsQ0FBQztDQUNGIn0=