"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('empty without cards in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyCards = [];
    const hand = new typedeck_1.Hand();
    t.deepEqual(hand.getCards(), emptyCards);
}));
ava_1.test('is empty with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const hand = new typedeck_1.Hand();
    t.true(hand.isEmpty(), 'isEmpty() should have been true');
}));
ava_1.test('has default name', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const hand = new typedeck_1.Hand();
    t.deepEqual(hand.name, 'Hand');
}));
ava_1.test('can assign name', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const hand = new typedeck_1.Hand();
    hand.name = 'Player 1 Hand';
    t.deepEqual(hand.name, 'Player 1 Hand');
}));
ava_1.test('has cards when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const hand = new typedeck_1.Hand(cards);
    t.false(hand.isEmpty(), 'was empty');
    t.deepEqual(hand.getCards()[0], cards[0], 'Cards were not equivalent or added in same order');
    t.deepEqual(hand.getCards()[1], cards[1], 'Cards were not equivalent or added in same order');
}));
ava_1.test('playing a card removes it from hand', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const playedCard = new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs);
    const hand = new typedeck_1.Hand(cards);
    hand.playCard(playedCard);
    t.false(hand.hasCard(playedCard), 'hasCard() should have been false');
    t.true(hand.getCount() === 1, 'Invalid card count left in hand');
}));
ava_1.test('throw error if no cards to sort', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const hand = new typedeck_1.Hand();
    try {
        hand.sortCards(new typedeck_1.AceHighRankSet());
    }
    catch (err) {
        t.deepEqual(err.message, 'No cards to sort');
    }
}));
ava_1.test('throw error if no Suit order defined', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const hand = new typedeck_1.Hand(cards);
    hand.suitOrder = [];
    try {
        hand.sortCards(new typedeck_1.AceHighRankSet());
    }
    catch (err) {
        t.deepEqual(err.message, 'No suit order defined');
    }
}));
ava_1.test('sort clubs to spades', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const hand = new typedeck_1.Hand(cards);
    hand.sortCards(new typedeck_1.AceHighRankSet());
    t.true(hand.getCards()[0].suit === typedeck_1.Suit.Clubs);
    t.true(hand.getCards()[1].suit === typedeck_1.Suit.Spades);
}));
ava_1.test('sort cards aces high', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades)
    ];
    const hand = new typedeck_1.Hand(cards);
    hand.sortCards(new typedeck_1.AceHighRankSet());
    t.true(hand.getCards()[1].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[3].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[5].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[7].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[0].suit === typedeck_1.Suit.Clubs);
    t.true(hand.getCards()[2].suit === typedeck_1.Suit.Spades);
    t.true(hand.getCards()[4].suit === typedeck_1.Suit.Diamonds);
    t.true(hand.getCards()[6].suit === typedeck_1.Suit.Hearts);
}));
ava_1.test('sort cards aces low', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades)
    ];
    const hand = new typedeck_1.Hand(cards);
    hand.sortCards(new typedeck_1.AceLowRankSet());
    t.true(hand.getCards()[0].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[2].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[4].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[6].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[0].suit === typedeck_1.Suit.Clubs);
    t.true(hand.getCards()[2].suit === typedeck_1.Suit.Spades);
    t.true(hand.getCards()[4].suit === typedeck_1.Suit.Diamonds);
    t.true(hand.getCards()[6].suit === typedeck_1.Suit.Hearts);
}));
ava_1.test('custom suit order sorting', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.King, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades)
    ];
    const hand = new typedeck_1.Hand(cards);
    hand.suitOrder = [typedeck_1.Suit.Hearts, typedeck_1.Suit.Diamonds, typedeck_1.Suit.Spades, typedeck_1.Suit.Clubs];
    hand.sortCards(new typedeck_1.AceLowRankSet());
    t.true(hand.getCards()[0].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[2].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[4].cardName === typedeck_1.CardName.Ace);
    t.true(hand.getCards()[6].cardName === typedeck_1.CardName.Ace);
    t.true(hand.cardAtIndex(0).suit === typedeck_1.Suit.Hearts);
    t.true(hand.getCards()[2].suit === typedeck_1.Suit.Diamonds);
    t.true(hand.getCards()[4].suit === typedeck_1.Suit.Spades);
    t.true(hand.getCards()[6].suit === typedeck_1.Suit.Clubs);
}));
//# sourceMappingURL=data:application/json;base64,