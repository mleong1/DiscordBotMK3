"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('test tostring of hand types', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const handResult = new typedeck_1.PokerHandResult();
    t.deepEqual(handResult.toString(), '');
    handResult.setHandType(typedeck_1.PokerHandType.HighCard);
    t.deepEqual(handResult.toString(), 'High Card');
    handResult.setHandType(typedeck_1.PokerHandType.OnePair);
    t.deepEqual(handResult.toString(), 'One Pair');
    handResult.setHandType(typedeck_1.PokerHandType.TwoPair);
    t.deepEqual(handResult.toString(), 'Two Pair');
    handResult.setHandType(typedeck_1.PokerHandType.ThreeOfAKind);
    t.deepEqual(handResult.toString(), 'Three Of A Kind');
    handResult.setHandType(typedeck_1.PokerHandType.Flush);
    t.deepEqual(handResult.toString(), 'Flush');
    handResult.setHandType(typedeck_1.PokerHandType.FullHouse);
    t.deepEqual(handResult.toString(), 'Full House');
    handResult.setHandType(typedeck_1.PokerHandType.FourOfAKind);
    t.deepEqual(handResult.toString(), 'Four Of A Kind');
    handResult.setHandType(typedeck_1.PokerHandType.StraightFlush);
    t.deepEqual(handResult.toString(), 'Straight Flush');
    handResult.setHandType(typedeck_1.PokerHandType.RoyalFlush);
    t.deepEqual(handResult.toString(), 'Royal Flush');
}));
ava_1.test('kickers should be cards which do not exist in cardsUsed', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Six, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed);
    t.true(handResult.kickers.length === 2);
    t.true(handResult.kickers[0].cardName === typedeck_1.CardName.Seven);
    t.true(handResult.kickers[1].cardName === typedeck_1.CardName.Six);
});
ava_1.test('kickers should be empty if all cards used', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed);
    t.true(handResult.kickers.length === 0);
});
ava_1.test('can be created with different RankSets', t => {
    const handResult1 = new typedeck_1.PokerHandResult([], 0, [], new typedeck_1.AceHighRankSet());
    t.true(handResult1.rankSet instanceof typedeck_1.AceHighRankSet);
    const handResult2 = new typedeck_1.PokerHandResult([], 0, [], new typedeck_1.AceLowRankSet());
    t.true(handResult2.rankSet instanceof typedeck_1.AceLowRankSet);
});
ava_1.test('returns card names used in scoring FullHouse', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed).setHandType(typedeck_1.PokerHandType.FullHouse);
    t.true(handResult.scoringHandCardNames.map(cn => typedeck_1.CardName[cn]).join(' ') === 'Nine Seven');
});
ava_1.test('returns card names used in scoring TwoPair', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed).setHandType(typedeck_1.PokerHandType.TwoPair);
    t.true(handResult.scoringHandCardNames.map(cn => typedeck_1.CardName[cn]).join(' ') === 'Nine Seven');
});
ava_1.test('returns card names used in scoring Straight', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Jack, typedeck_1.Suit.Hearts)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed).setHandType(typedeck_1.PokerHandType.Straight);
    t.true(handResult.scoringHandCardNames.map(cn => typedeck_1.CardName[cn]).join(' ') === 'Jack Ten Nine Eight Seven');
});
ava_1.test('returns card names used in scoring OnePair', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Nine, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Seven, typedeck_1.Suit.Diamonds)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed).setHandType(typedeck_1.PokerHandType.OnePair);
    t.true(handResult.scoringHandCardNames.map(cn => typedeck_1.CardName[cn]).join(' ') === 'Seven');
});
ava_1.test('returns card names used in scoring HighCard', t => {
    const cardsInPlay = [new typedeck_1.PlayingCard(typedeck_1.CardName.Three, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades), new typedeck_1.PlayingCard(typedeck_1.CardName.Four, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Five, typedeck_1.Suit.Hearts)];
    const cardsUsed = [new typedeck_1.PlayingCard(typedeck_1.CardName.Ten, typedeck_1.Suit.Spades)];
    const handResult = new typedeck_1.PokerHandResult(cardsInPlay, 0, cardsUsed).setHandType(typedeck_1.PokerHandType.HighCard);
    t.true(handResult.scoringHandCardNames.map(cn => typedeck_1.CardName[cn]).join(' ') === 'Ten');
});
//# sourceMappingURL=data:application/json;base64,