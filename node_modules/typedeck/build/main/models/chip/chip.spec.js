"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('chip has type of Standard if not specified', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.Chip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.Standard);
}));
ava_1.test('chip color is set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.Chip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
}));
ava_1.test('chip type can be set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.Chip(typedeck_1.ChipColor.Black, typedeck_1.ChipColorType.California);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.colorType, typedeck_1.ChipColorType.California);
}));
ava_1.test('chip color is printed', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.Chip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), typedeck_1.ChipColor[typedeck_1.ChipColor.Black]);
    t.deepEqual(chip.toString(), 'Black');
}));
ava_1.test('chip color is same as index', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chip = new typedeck_1.Chip(typedeck_1.ChipColor.Black);
    t.deepEqual(chip.color, typedeck_1.ChipColor.Black);
    t.deepEqual(chip.toString(), chip.getIndex());
}));
ava_1.test('chip value throws error unless set', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.White;
    const chip = new typedeck_1.Chip(chipColor);
    t.deepEqual(chip.color, chipColor);
    try {
        chip.getValue();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, `Unable to determine value of ${typedeck_1.ChipColor[chipColor]} Chip for ${typedeck_1.ChipColorType[typedeck_1.ChipColorType.Standard]}`);
    }
}));
ava_1.test('chip value returns override value', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.White;
    const overrideValue = 10;
    const chip = new typedeck_1.Chip(chipColor, typedeck_1.ChipColorType.Standard, overrideValue);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), overrideValue);
    t.deepEqual(chip.getValue(chipColor), overrideValue);
}));
ava_1.test('chip value returns override value after creation', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.White;
    const overrideValue = 10;
    const chip = new typedeck_1.Chip(chipColor, typedeck_1.ChipColorType.Standard);
    chip.setColorValue(chipColor, 1000);
    chip.setValue(overrideValue);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), overrideValue);
    t.deepEqual(chip.getValue(chipColor), overrideValue);
}));
ava_1.test('chip value can be set by color', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const chipColor = typedeck_1.ChipColor.White;
    const chipValue = 20;
    const chip = new typedeck_1.Chip(chipColor);
    chip.setColorValue(chipColor, chipValue);
    t.deepEqual(chip.color, chipColor);
    t.deepEqual(chip.getValue(), chipValue);
    t.deepEqual(chip.getValue(chipColor), chipValue);
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGVscy9jaGlwL2NoaXAuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMkI7QUFDM0IsdUNBQTBEO0FBRTFELFVBQUksQ0FBQyw0Q0FBNEMsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQzNELE1BQU0sSUFBSSxHQUFHLElBQUksZUFBSSxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFVBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksZUFBSSxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFVBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksZUFBSSxDQUFDLG9CQUFTLENBQUMsS0FBSyxFQUFFLHdCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFVBQUksQ0FBQyx1QkFBdUIsRUFBRSxD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