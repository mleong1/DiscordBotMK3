"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('produces combinations', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const testArray = [
        new typedeck_1.StandardChip(typedeck_1.ChipColor.White),
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Black),
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Green)
    ];
    let combinations = [];
    for (let comb of typedeck_1.IterableExtensions.Combinations(testArray, 3)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 1, 'did not produce proper number of combinations');
    combinations = [];
    for (let comb of typedeck_1.IterableExtensions.Combinations(testArray, 2)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 3, 'did not produce proper number of combinations');
    combinations = [];
    for (let comb of typedeck_1.IterableExtensions.Combinations(testArray, 1)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 3, 'did not produce proper number of combinations');
}));
ava_1.test('produces empty result if asking for too large combination', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const testArray = [
        new typedeck_1.StandardChip(typedeck_1.ChipColor.White),
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Black),
        new typedeck_1.StandardChip(typedeck_1.ChipColor.Green)
    ];
    let combinations = [];
    for (let comb of typedeck_1.IterableExtensions.Combinations(testArray, 4)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 0, 'produced erroneous combinations');
}));
ava_1.test('produces ranges counting up', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 1;
    const end = 11;
    const step = 1;
    let rangeNumbers = [];
    for (let num of typedeck_1.IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 10, 'produced erroneous range');
    t.true(rangeNumbers[0] === 1, 'first number in range wrong');
    t.true(rangeNumbers[9] === 10, 'last number in range wrong');
}));
ava_1.test('produces ranges counting up by 2s', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 1;
    const end = 11;
    const step = 2;
    let rangeNumbers = [];
    for (let num of typedeck_1.IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 5, 'produced erroneous range');
}));
ava_1.test('produces ranges counting down', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 15;
    const end = 9;
    const step = -1;
    let rangeNumbers = [];
    for (let num of typedeck_1.IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 6, 'produced erroneous range');
    t.true(rangeNumbers[0] === 15, 'first number in range wrong');
    t.true(rangeNumbers[5] === 10, 'last number in range wrong');
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmFibGVFeHRlbnNpb25zLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2l0ZXJhYmxlRXh0ZW5zaW9ucy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUEyQjtBQUMzQix1Q0FFa0I7QUFFbEIsVUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQU0sQ0FBQyxFQUFDLEVBQUU7SUFDdEMsTUFBTSxTQUFTLEdBQVk7UUFDekIsSUFBSSx1QkFBWSxDQUFDLG9CQUFTLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksdUJBQVksQ0FBQyxvQkFBUyxDQUFDLEtBQUssQ0FBQztRQUNqQyxJQUFJLHVCQUFZLENBQUMsb0JBQVMsQ0FBQyxLQUFLLENBQUM7S0FDbEMsQ0FBQztJQUNGLElBQUksWUFBWSxHQUFjLEVBQUUsQ0FBQztJQUNqQyxLQUFLLElBQUksSUFBSSxJQUFJLDZCQUFrQixDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDOUQsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtJQUNELENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsK0NBQStDLENBQUMsQ0FBQztJQUVuRixZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLEtBQUssSUFBSSxJQUFJLElBQUksNkJBQWtCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUM5RCxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDO0lBRW5GLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDbEIsS0FBSyxJQUFJLElBQUksSUFBSSw2QkFBa0IsQ0FBQyxZQUFZLENBQUMs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