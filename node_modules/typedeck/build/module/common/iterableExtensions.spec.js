import * as tslib_1 from "tslib";
import { test } from 'ava';
import { IterableExtensions, StandardChip, ChipColor } from 'typedeck';
test('produces combinations', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const testArray = [
        new StandardChip(ChipColor.White),
        new StandardChip(ChipColor.Black),
        new StandardChip(ChipColor.Green)
    ];
    let combinations = [];
    for (let comb of IterableExtensions.Combinations(testArray, 3)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 1, 'did not produce proper number of combinations');
    combinations = [];
    for (let comb of IterableExtensions.Combinations(testArray, 2)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 3, 'did not produce proper number of combinations');
    combinations = [];
    for (let comb of IterableExtensions.Combinations(testArray, 1)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 3, 'did not produce proper number of combinations');
}));
test('produces empty result if asking for too large combination', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const testArray = [
        new StandardChip(ChipColor.White),
        new StandardChip(ChipColor.Black),
        new StandardChip(ChipColor.Green)
    ];
    let combinations = [];
    for (let comb of IterableExtensions.Combinations(testArray, 4)) {
        combinations.push(comb);
    }
    t.true(combinations.length === 0, 'produced erroneous combinations');
}));
test('produces ranges counting up', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 1;
    const end = 11;
    const step = 1;
    let rangeNumbers = [];
    for (let num of IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 10, 'produced erroneous range');
    t.true(rangeNumbers[0] === 1, 'first number in range wrong');
    t.true(rangeNumbers[9] === 10, 'last number in range wrong');
}));
test('produces ranges counting up by 2s', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 1;
    const end = 11;
    const step = 2;
    let rangeNumbers = [];
    for (let num of IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 5, 'produced erroneous range');
}));
test('produces ranges counting down', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = 15;
    const end = 9;
    const step = -1;
    let rangeNumbers = [];
    for (let num of IterableExtensions.Range(start, end, step)) {
        rangeNumbers.push(num);
    }
    t.true(rangeNumbers.length === 6, 'produced erroneous range');
    t.true(rangeNumbers[0] === 15, 'first number in range wrong');
    t.true(rangeNumbers[5] === 10, 'last number in range wrong');
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmFibGVFeHRlbnNpb25zLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2l0ZXJhYmxlRXh0ZW5zaW9ucy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzNCLE9BQU8sRUFDTCxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUM1QyxNQUFNLFVBQVUsQ0FBQztBQUVsQixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUN0QyxNQUFNLFNBQVMsR0FBWTtRQUN6QixJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUNsQyxDQUFDO0lBQ0YsSUFBSSxZQUFZLEdBQWMsRUFBRSxDQUFDO0lBQ2pDLEtBQUssSUFBSSxJQUFJLElBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUM5RCxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDO0lBRW5GLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDbEIsS0FBSyxJQUFJLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQzlELFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7SUFDRCxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLCtDQUErQyxDQUFDLENBQUM7SUFF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