import { PokerHandType } from './pokerHandType.model';
import { AceHighRankSet } from '../card/aceHighRankSet.model';
export class PokerHandResult {
    constructor(cards = [], value = 0, cardsUsed = [], rankSet = new AceHighRankSet()) {
        /**
         * Comparable value of current hand
         * to rank above or below another
         * `PokerHandResult`.
         */
        this.value = 0;
        /**
         * All cards used to determine
         * result.
         */
        this.cards = [];
        /**
         * Cards in result.
         */
        this.cardsUsed = [];
        this.cards = cards;
        this.value = value;
        this.cardsUsed = cardsUsed;
        this.rankSet = rankSet;
    }
    /**
     * Cards that were used when scoring the hand
     * but had no impact on the score itself. Used to
     * help determine a winner in event of a tied score value.
     */
    get kickers() {
        const cardsNotUsedInResult = this.cards.filter((c) => this.cardsUsed.map(u => u.getIndex()).indexOf(c.getIndex()) === -1)
            .sort((a, b) => this.rankSet.getRankValue(b) - this.rankSet.getRankValue(a));
        return [...cardsNotUsedInResult];
    }
    /**
     * Unique list of `CardName` objects that had a play
     * in `PokerHandResult.value`.
     *
     * If you want every card that played a part
     * in the value, see the `PokerHandResult.cardsUsed` property.
     */
    get scoringHandCardNames() {
        const sortedCardsUsed = this.cardsUsed.sort((a, b) => this.rankSet.getRankValue(b) - this.rankSet.getRankValue(a));
        const uniqueCardNames = new Set(sortedCardsUsed.map(c => c.cardName));
        return [...uniqueCardNames];
    }
    setHandType(type) {
        this.handType = type;
        return this;
    }
    toString() {
        if (this.handType === undefined) {
            return '';
        }
        return PokerHandType[this.handType]
            // Look for long acronyms and filter out the last letter
            .replace(/([A-Z]+)([A-Z][a-z])/g, ' $1 $2')
            // Look for lower-case letters followed by upper-case letters
            .replace(/([a-z\d])([A-Z])/g, '$1 $2')
            // Look for lower-case letters followed by numbers
            .replace(/([a-zA-Z])(\d)/g, '$1 $2')
            .replace(/^./, function (str) { return str.toUpperCase(); })
            // Remove any white space left around the word
            .trim();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9rZXJIYW5kUmVzdWx0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGVscy9wb2tlci9wb2tlckhhbmRSZXN1bHQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUc5RCxNQUFNLE9BQU8sZUFBZTtJQW1EMUIsWUFDRSxRQUF1QixFQUFFLEVBQ3pCLFFBQWdCLENBQUMsRUFDakIsWUFBMkIsRUFBRSxFQUM3QixPQUFPLEdBQUcsSUFBSSxjQUFjLEVBQUU7UUFqRGhDOzs7O1dBSUc7UUFDSSxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBQ3pCOzs7V0FHRztRQUNJLFVBQUssR0FBa0IsRUFBRSxDQUFDO1FBQ2pDOztXQUVHO1FBQ0ksY0FBUyxHQUFrQixFQUFFLENBQUM7UUFxQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFuQ0Q7Ozs7T0FJRztJQUNILElBQVcsT0FBTztRQUNoQixNQUFNLG9CQUFvQixHQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDekYsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRixPQUFPLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDSCxJQUFXLG9CQUFvQjtRQUM3QixNQUFNLGVBQWUsR0FDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdGLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFXLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRixPQUFPLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBY0QsV0FBVyxDQUFFLElBQW1CO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQy9CLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ2pDLHdEQUF3RDthQUN2RCxPQUFPLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxDQUFDO1lBQzNDLDZEQUE2RDthQUM1RCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDO1lBQ3RDLGtEQUFrRDthQUNqRCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO2FBQ25DLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUQsOENBQThDO2FBQzdDLElBQUksRUFBRSxDQUFDO0lBQ1osQ0FBQztDQUNGIn0=