"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const typedeck_1 = require("typedeck");
ava_1.test('empty without cards in constructor', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const emptyCards = [];
    const cardCollection = new typedeck_1.CardCollection();
    t.deepEqual(cardCollection.getCards(), emptyCards);
}));
ava_1.test('is empty with no cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    t.true(cardCollection.isEmpty(), 'isEmpty() should have been true');
}));
ava_1.test('has cards when initialized with them', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Eight, typedeck_1.Suit.Diamonds),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Two, typedeck_1.Suit.Clubs)
    ];
    const cardCollection = new typedeck_1.CardCollection(cards);
    t.false(cardCollection.isEmpty(), 'was empty');
    t.deepEqual(cardCollection.getCards()[0], cards[0], 'Cards were not equivalent or added in same order');
    t.deepEqual(cardCollection.getCards()[1], cards[1], 'Cards were not equivalent or added in same order');
}));
ava_1.test('adds a single card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    cardCollection.addCard(card1);
    t.false(cardCollection.isEmpty(), 'Card was not added');
    t.true(cardCollection.getCount() === 1, 'Card count not matching');
    t.deepEqual(cardCollection.getCards()[0], card1, 'Card that was added did not match entry in collection');
}));
ava_1.test('adds multiple cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    cardCollection.addCards([card1, card2]);
    t.false(cardCollection.isEmpty(), 'Cards were not added');
    t.deepEqual(cardCollection.getCards()[0], card1, 'Card that was added did not match entry in collection');
    t.deepEqual(cardCollection.getCards()[1], card2, 'Card that was added did not match entry in collection');
}));
ava_1.test('can take a card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    cardCollection.addCards([card1, card2]);
    t.deepEqual(cardCollection.takeCard(), card1, 'Card that was added did not match entry in collection');
    t.deepEqual(cardCollection.takeCard(), card2, 'Card that was added did not match entry in collection');
}));
ava_1.test('can take a specific card out', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    const card4 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds);
    cardCollection.addCards([card1, card2, card3, card4]);
    cardCollection.removeCards([card2]);
    t.false(cardCollection.hasCard(card2), 'Card2 remained in collection');
}));
ava_1.test('can check and remove multiple cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    const card4 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds);
    cardCollection.addCards([card1, card2, card3, card4]);
    t.true(cardCollection.hasCards([card3, card4]));
    cardCollection.removeCards([card3, card4]);
    t.false(cardCollection.hasCards([card3, card4]));
    t.true(cardCollection.hasCards([card1, card2]));
}));
ava_1.test('can chain addCard commands', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    const card4 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds);
    cardCollection
        .addCard(card1)
        .addCard(card2)
        .addCards([card3, card4]);
    t.true(cardCollection.hasCards([card1, card2, card3, card4]));
}));
ava_1.test('can chain addCard commands', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    const card4 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds);
    cardCollection
        .addCard(card1)
        .addCard(card2)
        .addCards([card3, card4]);
    t.true(cardCollection.hasCards([card1, card2, card3, card4]));
}));
ava_1.test('can take multiple cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    const card4 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds);
    cardCollection
        .addCard(card1)
        .addCard(card2)
        .addCards([card3, card4]);
    const pulledCards = cardCollection.takeCards(3);
    pulledCards.forEach((card) => {
        t.not(card, null);
    });
    t.true(pulledCards.length === 3);
    t.true(cardCollection.getCount() === 1);
}));
ava_1.test('shuffles cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const injectedCards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds)
    ];
    const cardCollection = new typedeck_1.CardCollection(injectedCards);
    const initialLength = cardCollection.getCount();
    cardCollection.shuffle();
    t.true(cardCollection.getCount() === initialLength, 'After shuffling cards, card count no longer equivalent');
}));
ava_1.test('throws error if removing card not in collection', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    cardCollection
        .addCard(card1)
        .addCard(card2);
    t.false(cardCollection.hasCard(card3));
    try {
        cardCollection.removeCards([card3]);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Card does not exist in collection');
    }
}));
ava_1.test('takes all cards when 0 requested', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const injectedCards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds)
    ];
    const cardCollection = new typedeck_1.CardCollection(injectedCards);
    const takenCards = cardCollection.takeCards(0);
    t.true(takenCards.length === 4);
}));
ava_1.test('takes all cards when -1 requested', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const injectedCards = [
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts),
        new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Diamonds)
    ];
    const cardCollection = new typedeck_1.CardCollection(injectedCards);
    const takenCards = cardCollection.takeCards(-1);
    t.true(takenCards.length === 4);
}));
ava_1.test('throws error if taking more cards than available', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    cardCollection.addCards([card1, card2, card3]);
    cardCollection.takeCard();
    cardCollection.takeCard();
    cardCollection.takeCard();
    t.true(cardCollection.isEmpty());
    try {
        cardCollection.takeCard();
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'No cards remaining in pile');
    }
}));
ava_1.test('can identify index of card', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    cardCollection.addCards([card1, card2, card3]);
    t.true(cardCollection.indexOfCard(new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades)) === 0);
    t.true(cardCollection.indexOfCard(new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs)) === 1);
    t.true(cardCollection.indexOfCard(new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts)) === 2);
    t.true(cardCollection.indexOfCard(new typedeck_1.PlayingCard(typedeck_1.CardName.Queen, typedeck_1.Suit.Hearts)) === -1);
}));
ava_1.test('can return card at index', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const cardCollection = new typedeck_1.CardCollection();
    const card1 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Spades);
    const card2 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Clubs);
    const card3 = new typedeck_1.PlayingCard(typedeck_1.CardName.Ace, typedeck_1.Suit.Hearts);
    cardCollection.addCards([card1, card2, card3]);
    t.true(cardCollection.cardAtIndex(2) === card3);
    try {
        cardCollection.cardAtIndex(3);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Card collection does not contain card at index');
    }
    try {
        cardCollection.cardAtIndex(-5);
        t.fail('Error should have thrown');
    }
    catch (err) {
        t.deepEqual(err.message, 'Card collection does not contain card at index');
    }
}));
//# sourceMappingURL=data:application/json;base64,