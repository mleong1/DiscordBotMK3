import * as tslib_1 from "tslib";
import { test } from 'ava';
import { BaseGameType, DeckOptions, PlayingCard, CardName, Suit } from 'typedeck';
test('basegametype has empty allowed cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const gameType = new BaseGameType();
    t.true(gameType.cardsAllowed.length === 0, 'BaseGameType contained allowed Cards at initialization');
}));
test('creates a deck without options', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const allowedCards = [
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts)
    ];
    const gameType = new BaseGameType();
    gameType.cardsAllowed = allowedCards;
    const deck = gameType.createDeck();
    t.true(deck.getCount() === 2);
    t.true(deck.hasCards([
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts)
    ]));
}));
test('creates a deck with options', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const allowedCards = [
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts)
    ];
    const gameType = new BaseGameType();
    gameType.cardsAllowed = allowedCards;
    const options = new DeckOptions();
    options.numberOfDecks = 2;
    const deck = gameType.createDeck(options);
    t.true(deck.getCount() === (allowedCards.length * options.numberOfDecks) + options.extraCards.length);
    deck.removeCards([new PlayingCard(CardName.Ace, Suit.Spades)]);
    t.true(deck.hasCards([
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts)
    ]));
}));
test('creates a deck with options and extra cards', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const allowedCards = [
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts)
    ];
    const gameType = new BaseGameType();
    gameType.cardsAllowed = allowedCards;
    const options = new DeckOptions();
    options.numberOfDecks = 2;
    options.extraCards = [
        new PlayingCard(CardName.Jack, Suit.Clubs)
    ];
    const deck = gameType.createDeck(options);
    t.true(deck.getCount() === (allowedCards.length * options.numberOfDecks) + options.extraCards.length);
    deck.removeCards([new PlayingCard(CardName.Ace, Suit.Spades)]);
    t.true(deck.hasCards([
        new PlayingCard(CardName.Ace, Suit.Spades),
        new PlayingCard(CardName.King, Suit.Hearts),
        new PlayingCard(CardName.Jack, Suit.Clubs)
    ]));
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZVR5cGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvZ2FtZVR5cGUvZ2FtZVR5cGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQztBQUMzQixPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBUyxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6RixJQUFJLENBQUMsc0NBQXNDLEVBQUUsQ0FBTSxDQUFDLEVBQUMsRUFBRTtJQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLHdEQUF3RCxDQUFDLENBQUM7QUFDdkcsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFNLENBQUMsRUFBQyxFQUFFO0lBQy9DLE1BQU0sWUFBWSxHQUFZO1FBQzVCLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7S0FDNUMsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDcEMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNu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